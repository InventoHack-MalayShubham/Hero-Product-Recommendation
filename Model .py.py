# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UeM0nXpZZf1FKaU-zBOTr7vopdU-r3UJ
"""

import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

df = pd.read_csv("/content/rohit_electronics_sales_data malay.csv")
df.columns = df.columns.str.strip()

if "Customer Rating" in df.columns:
    df.rename(columns={"Customer Rating": "Rating"}, inplace=True)

required_cols = ["Product Name", "Brand Name", "Rating", "Units Sold", "Total_Revenue_Incl_GST"]
if not all(col in df.columns for col in required_cols):
    print("Required columns are missing. Please check your CSV file.")
    exit()

if "Category" not in df.columns:
    df["Category"] = np.random.choice(
        ["Mobiles", "Laptops", "Mobile Accessories", "Laptop Accessories"], size=len(df)
    )

df["Rating_Value"] = df["Rating"] * df["Units Sold"]

grouped = df.groupby(["Product Name", "Brand Name", "Category"]).agg({
    "Units Sold": "sum",
    "Rating_Value": "sum",
    "Rating": "mean",
    "Total_Revenue_Incl_GST": "sum"
}).reset_index()

grouped["Weighted Rating"] = grouped["Rating_Value"] / grouped["Units Sold"]
np.random.seed(42)
grouped["Stock"] = np.random.randint(0, 50, size=len(grouped))

X = grouped[["Units Sold", "Weighted Rating", "Total_Revenue_Incl_GST"]]
X_scaled = StandardScaler().fit_transform(X)

kmeans = KMeans(n_clusters=3, random_state=42)
grouped["Cluster"] = kmeans.fit_predict(X_scaled)

u_median = grouped["Units Sold"].median()
r_median = grouped["Total_Revenue_Incl_GST"].median()

def bcg_category(row):
    if row["Units Sold"] >= u_median and row["Total_Revenue_Incl_GST"] >= r_median:
        return "Star"
    elif row["Units Sold"] < u_median and row["Total_Revenue_Incl_GST"] >= r_median:
        return "Cow"
    elif row["Units Sold"] >= u_median and row["Total_Revenue_Incl_GST"] < r_median:
        return "Question"
    else:
        return "Dog"

grouped["BCG_Category"] = grouped.apply(bcg_category, axis=1)

def stock_status(row):
    if row["Stock"] <= 10:
        reorder = max(row["Units Sold"] // 12 * 2, 10)
        return f"❌ Low Stock! Suggest Reorder: {reorder} units"
    return f"✔️ In Stock: {row['Stock']} units"

while True:
    print("\nSelect a Product Category:")
    print("1. Mobiles\n2. Laptops\n3. Mobile Accessories\n4. Laptop Accessories")
    category_input = input("Enter your choice: ").strip().lower()

    category_map = {
        "1": "Mobiles", "2": "Laptops", "3": "Mobile Accessories", "4": "Laptop Accessories",
        "mobiles": "Mobiles", "laptops": "Laptops",
        "mobile accessories": "Mobile Accessories", "laptop accessories": "Laptop Accessories"
    }

    category = category_map.get(category_input)
    if not category:
        print("Invalid category selection. Please try again.")
        continue

    filtered = grouped[grouped["Category"] == category]
    if filtered.empty:
        print("No products found in this category.")
        continue

    print(f"\n📦 All Products in '{category}':")
    print(filtered[["Category", "Product Name", "Brand Name"]])

    print("\nSelect Analysis Type:")
    print("1. Hero\n2. Trending\n3. BCG")
    analysis_type = input("Enter your choice: ").strip().lower()

    if analysis_type in ["1", "hero"]:
        top_cluster = filtered.groupby("Cluster")[["Weighted Rating", "Total_Revenue_Incl_GST"]].mean().sort_values(
            by=["Weighted Rating", "Total_Revenue_Incl_GST"], ascending=False).index[0]

        top_heroes = filtered[filtered["Cluster"] == top_cluster].sort_values(
            by=["Weighted Rating", "Total_Revenue_Incl_GST"], ascending=False).head(5)

        print("\n🏆 Top 5 Hero Products (with BCG Category):")
        print(top_heroes[["Category", "Product Name", "Brand Name", "Weighted Rating", "Total_Revenue_Incl_GST", "BCG_Category", "Stock"]])

    elif analysis_type in ["2", "trending"]:
        trending = filtered.sort_values(by="Units Sold", ascending=False).head(5)
        trending["Stock_Status"] = trending.apply(stock_status, axis=1)

        print("\n🔥 Top 5 Trending Products:")
        print(trending[["Category", "Product Name", "Brand Name", "Units Sold", "Total_Revenue_Incl_GST", "BCG_Category", "Stock", "Stock_Status"]])

    elif analysis_type in ["3", "bcg"]:
        print("\nChoose BCG Type (Star / Cow / Question / Dog / All):")
        bcg_choice = input("Enter BCG category: ").strip().capitalize()

        valid_bcg = ["Star", "Cow", "Question", "Dog", "All"]
        if bcg_choice not in valid_bcg:
            print("Invalid BCG category.")
            continue

        if bcg_choice == "All":
            for bcg in ["Star", "Cow", "Question", "Dog"]:
                temp = filtered[filtered["BCG_Category"] == bcg]
                if not temp.empty:
                    print(f"\n🔹 {bcg} Products:")
                    print(temp[["Category", "Product Name", "Brand Name", "Units Sold", "Total_Revenue_Incl_GST", "Stock"]])
                else:
                    print(f"\n🔸 No {bcg} products in this category.")
        else:
            result = filtered[filtered["BCG_Category"] == bcg_choice]
            if not result.empty:
                print(f"\n🔹 {bcg_choice} Products:")
                print(result[["Category", "Product Name", "Brand Name", "Units Sold", "Total_Revenue_Incl_GST", "Stock"]])
            else:
                print(f"No {bcg_choice} products found in this category.")

    else:
        print("Invalid analysis type. Please try again.")

    again = input("\nDo you want to analyze another category? (yes/no): ").strip().lower()
    if again != "yes":
        print("✅ Thank you for using the Product Analysis Program!")
        break