

----- File: D:\ML Folders\ml_env\GitHub\Hero-Product-Recommendation\all_code_snippets.txt -----


----- File: D:\ML Folders\ml_env\GitHub\Hero-Product-Recommendation\app.py -----
from flask import Flask, render_template, request, jsonify, redirect, url_for, flash, session, Response
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, r2_score
from datetime import datetime, timedelta
import warnings
# import matplotlib.pyplot as plt
# import seaborn as sns
import io
import base64
import os
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
from functools import wraps

warnings.filterwarnings('ignore')

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your-secret-key-here'  # Change this to a secure secret key
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///hero_inventory.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(128))
    is_admin = db.Column(db.Boolean, default=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    last_login = db.Column(db.DateTime)
    is_active = db.Column(db.Boolean, default=True)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

class Product(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    product_name = db.Column(db.String(200), nullable=False)
    brand_name = db.Column(db.String(100), nullable=False)
    category = db.Column(db.String(100), nullable=False)
    subcategory = db.Column(db.String(100), nullable=False)
    unit_price = db.Column(db.Float, nullable=False)
    cost_price = db.Column(db.Float, nullable=False)
    gst_percentage = db.Column(db.Float, nullable=False)
    description = db.Column(db.Text)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    inventory = db.relationship('Inventory', backref='product', lazy=True)
    transactions = db.relationship('Transaction', backref='product', lazy=True)

class Inventory(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    product_id = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=False)
    current_stock = db.Column(db.Integer, nullable=False)
    reorder_level = db.Column(db.Integer, nullable=False)
    reorder_quantity = db.Column(db.Integer, nullable=False)
    stock_status = db.Column(db.String(50), nullable=False)
    supplier_name = db.Column(db.String(200))
    lead_time = db.Column(db.Integer)  # in days
    last_restocked = db.Column(db.DateTime)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class Transaction(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    transaction_id = db.Column(db.String(50), unique=True, nullable=False)
    product_id = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=False)
    date = db.Column(db.DateTime, nullable=False)
    units_sold = db.Column(db.Integer, nullable=False)
    discount_percentage = db.Column(db.Float, default=0)
    discounted_price = db.Column(db.Float, nullable=False)
    total_revenue = db.Column(db.Float, nullable=False)
    gst_amount = db.Column(db.Float, nullable=False)
    total_revenue_incl_gst = db.Column(db.Float, nullable=False)
    customer_type = db.Column(db.String(50))
    payment_method = db.Column(db.String(50))
    rating = db.Column(db.Float)
    returns = db.Column(db.Boolean, default=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

# Create database tables
with app.app_context():
    db.create_all()
    
    # Create default admin user if not exists
    if not User.query.filter_by(username='admin').first():
        admin = User(
            username='admin',
            email='admin@heroinventory.com',
            is_admin=True
        )
        admin.set_password('admin123')  # Change this password in production
        db.session.add(admin)
        db.session.commit()

# Global variables
model = None
df = None
sales_df = None
inventory_df = None
last_update = None

# Load dataset and enrich it
def load_data():
    global sales_df, inventory_df, last_update
    try:
        # Load sales data
        print("Loading sales data...")
        sales_df = pd.read_csv('Datasets/rohit_electronics_sales_1000.csv')
        print(f"Sales data loaded with shape: {sales_df.shape}")
        
        # Convert date column
        print("Converting date column...")
        sales_df['Date'] = pd.to_datetime(sales_df['Date'])
        
        # Print column names for debugging
        print("Sales DataFrame Columns:", sales_df.columns.tolist())
        
        # Load inventory data
        print("Loading inventory data...")
        inventory_df = pd.read_csv('Datasets/inventory_data_new1.csv')
        print(f"Inventory data loaded with shape: {inventory_df.shape}")
        
        # Print column names for debugging
        print("Inventory DataFrame Columns:", inventory_df.columns.tolist())
        
        # Rename columns to avoid conflicts
        print("Renaming columns...")
        inventory_df = inventory_df.rename(columns={
            'Current Stock': 'Inventory_Current_Stock',
            'Stock Status': 'Inventory_Stock_Status'
        })
        
        # Merge data
        print("Merging datasets...")
        merged_df = pd.merge(sales_df, inventory_df, 
                           left_on=['Product Name', 'Brand Name', 'Product Category'],
                           right_on=['Product Name', 'Brand Name', 'Product Category'],
                           how='left')
        print(f"Merged dataset shape: {merged_df.shape}")
        
        # Check for missing values
        print("\nMissing values in merged dataset:")
        print(merged_df.isnull().sum())
        
        last_update = datetime.now()
        return merged_df
        
    except Exception as e:
        print(f"Error loading data: {str(e)}")
        import traceback
        print("Full traceback:")
        print(traceback.format_exc())
        return None

def load_inventory_dataset():
    try:
        print("Loading inventory dataset...")
        df = pd.read_csv('generated_1000_inventory_dataset.csv')
        print(f"Inventory dataset loaded with shape: {df.shape}")
        
        # Convert date column
        df['Date'] = pd.to_datetime(df['Date'])
        
        with app.app_context():
            # Clear existing data
            Transaction.query.delete()
            Inventory.query.delete()
            Product.query.delete()
            db.session.commit()
            
            # Process each row
            for _, row in df.iterrows():
                # Create or get product
                product = Product(
                    product_name=row['Product Name'],
                    brand_name=row['Brand Name'],
                    category=row['Product Category'],
                    subcategory=row['Subcategory'],
                    unit_price=float(row['Unit Price']),
                    cost_price=float(row['Cost Price']),
                    gst_percentage=float(row['GST (%)']),
                    description=f"{row['Brand Name']} {row['Product Name']} - {row['Product Category']} {row['Subcategory']}"
                )
                db.session.add(product)
                db.session.flush()  # Get the product ID
                
                # Create inventory record
                inventory = Inventory(
                    product_id=product.id,
                    current_stock=int(row['Current Stock']),
                    reorder_level=int(row['Reorder Level']),
                    reorder_quantity=int(row['Reorder Quantity']),
                    stock_status=row['Stock Status'],
                    supplier_name=row['Supplier Name'],
                    lead_time=int(row['Lead Time']),
                    last_restocked=row['Date']
                )
                db.session.add(inventory)
                
                # Create transaction record
                transaction = Transaction(
                    transaction_id=row['Transaction ID'],
                    product_id=product.id,
                    date=row['Date'],
                    units_sold=1,  # Assuming 1 unit per transaction
                    discount_percentage=float(row['Discount (%)']),
                    discounted_price=float(row['Discounted Price']),
                    total_revenue=float(row['Total Revenue']),
                    gst_amount=float(row['GST_Amount']),
                    total_revenue_incl_gst=float(row['Total_Revenue_Incl_GST']),
                    customer_type=row['Customer Type'],
                    payment_method=row['Payment Method'],
                    rating=float(row['Rating']),
                    returns=bool(row['Returns'])
                )
                db.session.add(transaction)
            
            # Commit all changes
            db.session.commit()
            print("Successfully loaded inventory dataset into database")
            return True
            
    except Exception as e:
        print(f"Error loading inventory dataset: {str(e)}")
        import traceback
        print("Full traceback:")
        print(traceback.format_exc())
        return False

# Build the ML model
def build_model(df):
    try:
        print("\nBuilding model...")
        # Use only available columns
        features = ['Product Category', 'Brand Name', 'Rating', 'Current Stock']
        target = 'Total_Revenue_Incl_GST'

        print("Checking required columns...")
        missing_cols = [col for col in features + [target] if col not in df.columns]
        if missing_cols:
            raise ValueError(f"Missing required columns: {missing_cols}")

        # Prepare features
        print("Preparing features...")
        X = df[features].copy()
        y = df[target]

        # Check for missing values
        print("\nMissing values in features:")
        print(X.isnull().sum())
        print("\nMissing values in target:")
        print(y.isnull().sum())

        # Convert categorical variables to numerical
        print("Converting categorical variables...")
        X = pd.get_dummies(X, columns=['Product Category', 'Brand Name'])

        # Split the data
        print("Splitting data...")
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.2, random_state=42)
        print(f"Training set shape: {X_train.shape}")
        print(f"Test set shape: {X_test.shape}")

        # Scale the features
        print("Scaling features...")
        scaler = StandardScaler()
        X_train_scaled = scaler.fit_transform(X_train)
        X_test_scaled = scaler.transform(X_test)

        # Train the model
        print("Training model...")
        model = RandomForestRegressor(n_estimators=100, random_state=42)
        model.fit(X_train_scaled, y_train)

        # Make predictions
        print("Making predictions...")
        y_pred = model.predict(X_test_scaled)
        mae = mean_absolute_error(y_test, y_pred)
        r2 = r2_score(y_test, y_pred)

        print(f"\nModel evaluation:")
        print(f"Mean Absolute Error: {mae:.2f}")
        print(f"R² Score: {r2:.2f}")

        return model, mae, r2
        
    except Exception as e:
        print(f"Error building model: {str(e)}")
        import traceback
        print("Full traceback:")
        print(traceback.format_exc())
        return None, None, None

# Generate analytics plot
def generate_plot():
    plt.figure(figsize=(8, 6))
    category_price = df.groupby('Product Category')['Unit Price'].mean().sort_values(ascending=False)
    sns.barplot(x=category_price.index, y=category_price.values, palette='viridis')
    plt.title('Average Unit Price by Product Category')
    plt.xticks(rotation=90)
    img = io.BytesIO()
    plt.savefig(img, format='png')
    img.seek(0)
    img_b64 = base64.b64encode(img.getvalue()).decode('utf-8')
    plt.close()
    return img_b64

def get_category_price_ranges():
    """Calculate price ranges for each category"""
    price_ranges = {}
    for category in ['Mobiles', 'Laptops', 'Mobile Accessories', 'Laptop Accessories']:
        category_data = sales_df[sales_df['Product Category'] == category]
        min_price = category_data['Unit Price'].min()
        max_price = category_data['Unit Price'].max()
        price_ranges[category] = {
            'min': min_price,
            'max': max_price
        }
    return price_ranges

def calculate_product_score(product):
    """Calculate a score for each product based on multiple factors"""
    score = 0
    
    # Rating weight (30%)
    score += product['Rating'] * 0.3
    
    # Revenue weight (40%)
    revenue = product['Total_Revenue_Incl_GST']
    max_revenue = sales_df['Total_Revenue_Incl_GST'].max()
    score += (revenue / max_revenue) * 0.4
    
    # Stock status weight (30%)
    if product['Stock_Status'] == 'OK':
        score += 0.3
    elif product['Stock_Status'] == 'Low':
        score += 0.15
    
    return score

def get_recommendations(category=None, n=5):
    """Get top n product recommendations for a given category or all categories."""
    try:
        print("\nGetting recommendations...")
        if sales_df is None or inventory_df is None:
            print("Reloading data...")
            load_data()
        
        if category:
            print(f"Getting recommendations for category: {category}")
            category_products = sales_df[sales_df['Product Category'] == category].copy()
            category_products['score'] = category_products.apply(calculate_product_score, axis=1)
            category_products = category_products.sort_values('score', ascending=False)
            category_products = category_products.drop_duplicates(subset=['Product Name'], keep='first')
            top_products = category_products.head(n)
            
            recommendations = []
            for _, product in top_products.iterrows():
                recommendations.append({
                    'product_name': product['Product Name'],
                    'brand': product['Brand Name'],
                    'price': product['Unit Price'],
                    'rating': product['Rating'],
                    'stock_status': product['Stock_Status'],
                    'current_stock': product['Current Stock'],
                    'total_revenue': product['Total_Revenue_Incl_GST'],
                    'score': product['score']
                })
        else:
            print("Getting recommendations for all categories")
            recommendations = {}
            for cat in ['Mobiles', 'Laptops', 'Mobile Accessories', 'Laptop Accessories']:
                cat_products = sales_df[sales_df['Product Category'] == cat].copy()
                cat_products['score'] = cat_products.apply(calculate_product_score, axis=1)
                cat_products = cat_products.sort_values('score', ascending=False)
                cat_products = cat_products.drop_duplicates(subset=['Product Name'], keep='first')
                top_products = cat_products.head(n)
                
                cat_recommendations = []
                for _, product in top_products.iterrows():
                    cat_recommendations.append({
                        'product_name': product['Product Name'],
                        'brand': product['Brand Name'],
                        'price': product['Unit Price'],
                        'rating': product['Rating'],
                        'stock_status': product['Stock_Status'],
                        'current_stock': product['Current Stock'],
                        'total_revenue': product['Total_Revenue_Incl_GST'],
                        'score': product['score']
                    })
                
                recommendations[cat] = cat_recommendations
        
        print("Recommendations generated successfully")
        return recommendations
        
    except Exception as e:
        print(f"Error in get_recommendations: {str(e)}")
        import traceback
        print("Full traceback:")
        print(traceback.format_exc())
        return {} if category is None else []

def bcg_matrix(df, category=None):
    """Generate BCG Matrix recommendations"""
    if category:
        df = df[df['Product Category'] == category]
    
    # Calculate metrics for BCG matrix
    df['Revenue_Per_Unit'] = df['Total_Revenue_Incl_GST'] / df['Current Stock'].replace(0, 1)
    df['Sales'] = df['Total_Revenue_Incl_GST']
    df['Profit'] = df['Revenue_Per_Unit'] * df['Current Stock']
    
    # Group by product and get max values
    df_grouped = df.groupby(['Product Name', 'Brand Name']).agg({
        'Unit Price': 'first',
        'Sales': 'max',
        'Profit': 'max'
    }).reset_index()
    
    # Calculate thresholds for classification
    sales_median = df_grouped['Sales'].median()
    profit_median = df_grouped['Profit'].median()
    
    # Adjust thresholds to be more lenient
    sales_threshold = sales_median * 0.8  # 80% of median
    profit_threshold = profit_median * 0.8  # 80% of median
    
    # Classify products
    stars = df_grouped[
        (df_grouped['Sales'] > sales_threshold) & 
        (df_grouped['Profit'] > profit_threshold)
    ]
    
    cows = df_grouped[
        (df_grouped['Sales'] <= sales_threshold) & 
        (df_grouped['Profit'] > profit_threshold)
    ]
    
    question_marks = df_grouped[
        (df_grouped['Sales'] > sales_threshold) & 
        (df_grouped['Profit'] <= profit_threshold)
    ]
    
    dogs = df_grouped[
        (df_grouped['Sales'] <= sales_threshold) & 
        (df_grouped['Profit'] <= profit_threshold)
    ]
    
    # If any category is empty, redistribute products
    if len(cows) == 0 or len(question_marks) == 0:
        # Sort all products by profit
        all_products = df_grouped.sort_values('Profit', ascending=False)
        
        # Take top products for each category
        n_products = len(all_products)
        if n_products >= 12:  # Ensure we have enough products
            stars = all_products.iloc[:3]
            cows = all_products.iloc[3:6]
            question_marks = all_products.iloc[6:9]
            dogs = all_products.iloc[9:12]
        else:
            # If not enough products, distribute them evenly
            chunk_size = max(1, n_products // 4)
            stars = all_products.iloc[:chunk_size]
            cows = all_products.iloc[chunk_size:2*chunk_size]
            question_marks = all_products.iloc[2*chunk_size:3*chunk_size]
            dogs = all_products.iloc[3*chunk_size:]
    
    # Format recommendations
    bcg_recommendations = {
        'stars': format_bcg_products(stars, n=3),
        'cows': format_bcg_products(cows, n=3),
        'question_marks': format_bcg_products(question_marks, n=3),
        'dogs': format_bcg_products(dogs, n=3)
    }
    
    return bcg_recommendations

def format_bcg_products(df, n=3):
    """Format products for BCG matrix display"""
    if df.empty:
        return []
    
    return df.head(n).apply(lambda row: {
        'product_name': row['Product Name'],
        'brand': row['Brand Name'],
        'price': row['Unit Price'],
        'sales': row['Sales'],
        'profit': row['Profit']
    }, axis=1).tolist()

def calculate_kpis(filtered_sales, comparison_sales=None):
    """Calculate key performance indicators from sales data"""
    try:
        # Print column names for debugging
        print("Filtered Sales Columns:", filtered_sales.columns.tolist())
        
        # Calculate basic KPIs
        total_revenue = filtered_sales['Total_Revenue_Incl_GST'].sum()
        total_orders = filtered_sales['Transaction ID'].nunique()  # Using Transaction ID instead of Order_ID
        avg_order_value = total_revenue / total_orders if total_orders > 0 else 0
        
        # Calculate stock turnover rate
        total_quantity = filtered_sales['Current Stock'].sum()  # Using Current Stock directly
        avg_stock = filtered_sales['Current Stock'].mean()
        stock_turnover = total_quantity / avg_stock if avg_stock > 0 else 0
        
        # Calculate customer retention rate
        total_customers = filtered_sales['Customer Type'].nunique()  # Using Customer Type instead of Customer_ID
        repeat_customers = filtered_sales.groupby('Customer Type').size()
        repeat_customers = (repeat_customers > 1).sum()
        retention_rate = (repeat_customers / total_customers * 100) if total_customers > 0 else 0
        
        # Find most popular product
        popular_product = filtered_sales.groupby('Product Name')['Total_Revenue_Incl_GST'].sum().idxmax()
        
        # Calculate growth rate if comparison data is available
        growth_rate = 0
        if comparison_sales is not None:
            prev_revenue = comparison_sales['Total_Revenue_Incl_GST'].sum()
            growth_rate = ((total_revenue - prev_revenue) / prev_revenue * 100) if prev_revenue > 0 else 0
        
        # Calculate inventory value
        inventory_value = filtered_sales['Current Stock'].sum() * filtered_sales['Unit Price'].mean()
        
        return {
            'total_revenue': total_revenue,
            'avg_order_value': avg_order_value,
            'total_orders': total_orders,
            'stock_turnover': stock_turnover,
            'retention_rate': retention_rate,
            'popular_product': popular_product,
            'growth_rate': growth_rate,
            'inventory_value': inventory_value
        }
        
    except Exception as e:
        print(f"Error calculating KPIs: {str(e)}")
        return {
            'total_revenue': 0,
            'avg_order_value': 0,
            'total_orders': 0,
            'stock_turnover': 0,
            'retention_rate': 0,
            'popular_product': '-',
            'growth_rate': 0,
            'inventory_value': 0
        }

def get_top_rated_products(df, n=3):
    """Get top n highest rated products from the dataset."""
    try:
        print("\nGetting top rated products...")
        # Filter out products with no ratings
        rated_products = df[df['rating'].notna()]
        print(f"Found {len(rated_products)} products with ratings")
        
        # Sort by rating in descending order and get top n
        top_products = rated_products.sort_values('rating', ascending=False).head(n)
        print(f"Selected top {len(top_products)} products")
        
        # Format the data for display
        return top_products[['product_name', 'brand', 'price', 'rating', 'reviews']].to_dict('records')
    except Exception as e:
        print(f"Error in get_top_rated_products: {str(e)}")
        return []

# Initialize
with app.app_context():
    try:
        print("Starting model initialization...")
        df = load_data()
        if df is None:
            raise ValueError("Failed to load data")
            
        print("\nData loaded successfully. Building model...")
        model, mae, r2 = build_model(df)
        
        if model is None:
            raise ValueError("Failed to build model")
            
        print(f"\nModel Initialized Successfully:")
        print(f"Mean Absolute Error: {mae:.2f}")
        print(f"R² Score: {r2:.2f}")
        
        # Store model and metrics in app context
        app.config['model'] = model
        app.config['model_mae'] = mae
        app.config['model_r2'] = r2
        
    except Exception as e:
        print(f"Error during initialization: {str(e)}")
        import traceback
        print("Full traceback:")
        print(traceback.format_exc())
        app.config['model'] = None
        app.config['model_mae'] = None
        app.config['model_r2'] = None

# Homepage route
@app.route('/')
def home():
    return render_template('home.html')

# ML model route
@app.route('/model')
@login_required
def model_page():
    try:
        # Check if model is available
        if app.config.get('model') is None:
            flash('Model is not initialized. Please try again later.', 'danger')
            return redirect(url_for('home'))
            
        print("\nLoading Amazon dataset...")
        amazon_df = pd.read_csv('Datasets/amazon_data_processed.csv')
        print(f"Amazon data loaded with shape: {amazon_df.shape}")
        
        print("\nGetting top rated products...")
        top_rated = get_top_rated_products(amazon_df)
        print(f"Found {len(top_rated)} top rated products")
        
        print("\nGetting recommendations...")
        recommendations = get_recommendations()
        print("Recommendations generated")
        
        print("\nGenerating BCG matrix...")
        bcg_recommendations = bcg_matrix(sales_df)
        print("BCG matrix generated")
        
        return render_template('model.html',
                             top_rated=top_rated,
                             recommendations=recommendations,
                             bcg_recommendations=bcg_recommendations)
                             
    except Exception as e:
        print(f"Error in model_page: {str(e)}")
        import traceback
        print("Full traceback:")
        print(traceback.format_exc())
        flash('Error loading model data. Please try again later.', 'danger')
        return redirect(url_for('home'))

# Analytics page
@app.route('/analytics')
@login_required
def analytics():
    try:
        sales_data = []
        transactions = Transaction.query.all()
        for t in transactions:
            sales_data.append({
                'Date': t.date,
                'Product Category': t.product.category,
                'Brand Name': t.product.brand_name,
                'Total_Revenue_Incl_GST': t.total_revenue_incl_gst,
                'Transaction ID': t.transaction_id,
                'Customer Type': t.customer_type,
                'Unit Price': t.product.unit_price,
                'Stock_Status': t.product.inventory[0].stock_status if t.product.inventory else 'Unknown'
            })
        sales_df = pd.DataFrame(sales_data)
        print(f"Created DataFrame with shape: {sales_df.shape}")
        if len(sales_df) == 0:
            print("No sales data available")
            flash('No sales data available. Please add some transactions first.', 'warning')
            return redirect(url_for('inventory'))
        min_date = sales_df["Date"].min().date()
        max_date = sales_df["Date"].max().date()
        categories = ["All"] + sorted(sales_df["Product Category"].dropna().unique().tolist())
        print(f"Date range: {min_date} to {max_date}")
        print(f"Categories: {categories}")
        return render_template("analytics.html", min_date=min_date, max_date=max_date, categories=categories)
    except Exception as e:
        print(f"Error in analytics route: {str(e)}")
        import traceback
        print("Full traceback:")
        print(traceback.format_exc())
        flash('Error loading analytics data. Please try again.', 'error')
        return redirect(url_for('inventory'))

# Fetch filtered data
@app.route('/get_data', methods=['POST'])
def get_data():
    try:
        data = request.json
        date_range = int(data.get('dateRange', 30))  # Default to 30 days if not specified
        category = data.get('category', 'all')
        compare_period = data.get('comparePeriod', 'none')

        # Calculate date range
        end_date = pd.Timestamp.now()
        start_date = end_date - pd.Timedelta(days=date_range)

        # Get transactions from database
        query = Transaction.query.filter(
            Transaction.date >= start_date,
            Transaction.date <= end_date
        )
        
        if category != 'all':
            query = query.join(Product).filter(Product.category == category)
            
        transactions = query.all()
        
        # Convert to DataFrame
        sales_data = []
        for t in transactions:
            sales_data.append({
                'Date': t.date,
                'Product Category': t.product.category,
                'Brand Name': t.product.brand_name,
                'Total_Revenue_Incl_GST': t.total_revenue_incl_gst,
                'Transaction ID': t.transaction_id,
                'Customer Type': t.customer_type,
                'Unit Price': t.product.unit_price,
                'Stock_Status': t.product.inventory[0].stock_status if t.product.inventory else 'Unknown'
            })
        
        filtered_sales = pd.DataFrame(sales_data)

        # Calculate comparison data if requested
        comparison_sales = None
        if compare_period != 'none':
            if compare_period == 'previous':
                comp_start = start_date - pd.Timedelta(days=date_range)
                comp_end = start_date
            else:  # year
                comp_start = start_date - pd.Timedelta(days=365)
                comp_end = end_date - pd.Timedelta(days=365)
            
            comp_query = Transaction.query.filter(
                Transaction.date >= comp_start,
                Transaction.date <= comp_end
            )
            
            if category != 'all':
                comp_query = comp_query.join(Product).filter(Product.category == category)
                
            comp_transactions = comp_query.all()
            
            comp_data = []
            for t in comp_transactions:
                comp_data.append({
                    'Date': t.date,
                    'Product Category': t.product.category,
                    'Brand Name': t.product.brand_name,
                    'Total_Revenue_Incl_GST': t.total_revenue_incl_gst,
                    'Transaction ID': t.transaction_id,
                    'Customer Type': t.customer_type,
                    'Unit Price': t.product.unit_price,
                    'Stock_Status': t.product.inventory[0].stock_status if t.product.inventory else 'Unknown'
                })
            
            comparison_sales = pd.DataFrame(comp_data)

        # Calculate KPIs
        kpis = calculate_kpis(filtered_sales, comparison_sales if compare_period != 'none' else None)

        # Prepare chart data
        chart_data = {
            'revenueByCategory': filtered_sales.groupby('Product Category')['Total_Revenue_Incl_GST'].sum().to_dict(),
            'dailyRevenue': filtered_sales.groupby(filtered_sales['Date'].dt.strftime('%Y-%m-%d'))['Total_Revenue_Incl_GST'].sum().to_dict(),
            'topBrands': filtered_sales.groupby('Brand Name')['Total_Revenue_Incl_GST'].sum().nlargest(5).to_dict(),
            'customerType': filtered_sales.groupby('Customer Type')['Transaction ID'].count().to_dict(),
            'stockStatus': filtered_sales.groupby('Stock_Status')['Transaction ID'].count().to_dict(),
            'priceRange': filtered_sales.groupby('Unit Price')['Transaction ID'].count().to_dict()
        }

        return jsonify({
            'kpis': kpis,
            'charts': chart_data
        })

    except Exception as e:
        print(f"Error in get_data: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        
        user = User.query.filter_by(username=username).first()
        
        if user and user.check_password(password):
            session['user_id'] = user.id
            session['username'] = user.username
            session['is_admin'] = user.is_admin
            user.last_login = datetime.utcnow()
            db.session.commit()
            flash('Logged in successfully!', 'success')
            return redirect(url_for('home'))
        else:
            flash('Invalid username or password', 'error')
    
    return render_template('login.html')

@app.route('/signup', methods=['GET', 'POST'])
def signup():
    if request.method == 'POST':
        username = request.form.get('username')
        email = request.form.get('email')
        password = request.form.get('password')
        confirm_password = request.form.get('confirm_password')
        
        if password != confirm_password:
            flash('Passwords do not match', 'danger')
            return redirect(url_for('signup'))
        
        if User.query.filter_by(username=username).first():
            flash('Username already exists', 'danger')
            return redirect(url_for('signup'))
        
        if User.query.filter_by(email=email).first():
            flash('Email already exists', 'danger')
            return redirect(url_for('signup'))
        
        user = User(username=username, email=email)
        user.set_password(password)
        
        db.session.add(user)
        db.session.commit()
        
        flash('Account created successfully! Please log in.', 'success')
        return redirect(url_for('login'))
    
    return render_template('signup.html')

@app.route('/logout')
def logout():
    session.clear()
    flash('Logged out successfully!', 'success')
    return redirect(url_for('home'))

@app.route('/model_status')
@login_required
def model_status():
    """Check the status of the model and data loading"""
    try:
        status = {
            'model_initialized': app.config.get('model') is not None,
            'data_loaded': sales_df is not None and inventory_df is not None,
            'last_update': last_update.strftime('%Y-%m-%d %H:%M:%S') if last_update else None,
            'model_metrics': {
                'mae': app.config.get('model_mae'),
                'r2': app.config.get('model_r2')
            }
        }
        
        if sales_df is not None:
            status['sales_data_shape'] = sales_df.shape
            status['sales_data_columns'] = sales_df.columns.tolist()
            
        if inventory_df is not None:
            status['inventory_data_shape'] = inventory_df.shape
            status['inventory_data_columns'] = inventory_df.columns.tolist()
            
        return jsonify(status)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/reload_model')
@login_required
def reload_model():
    """Reload the model and data"""
    try:
        global sales_df, inventory_df, last_update
        
        # Reload data
        df = load_data()
        if df is None:
            raise ValueError("Failed to load data")
            
        # Rebuild model
        model, mae, r2 = build_model(df)
        if model is None:
            raise ValueError("Failed to build model")
            
        # Update app config
        app.config['model'] = model
        app.config['model_mae'] = mae
        app.config['model_r2'] = r2
        
        flash('Model reloaded successfully!', 'success')
        return redirect(url_for('model_page'))
        
    except Exception as e:
        flash(f'Error reloading model: {str(e)}', 'danger')
        return redirect(url_for('home'))

@app.route('/load_inventory_dataset')
@login_required
def load_dataset():
    if not session.get('user_id'):
        return jsonify({'error': 'Not authenticated'}), 401
    
    user = User.query.get(session['user_id'])
    if not user or not user.is_admin:
        return jsonify({'error': 'Not authorized'}), 403
    
    success = load_inventory_dataset()
    if success:
        flash('Inventory dataset loaded successfully', 'success')
    else:
        flash('Error loading inventory dataset', 'error')
    
    return redirect(url_for('inventory'))

@app.route('/inventory')
@login_required
def inventory():
    return render_template('inventory.html')

@app.route('/api/products', methods=['GET'])
@login_required
def get_products():
    products = Product.query.all()
    return jsonify([{
        'id': p.id,
        'name': p.product_name,
        'brand': p.brand_name,
        'category': p.category,
        'subcategory': p.subcategory,
        'unit_price': p.unit_price,
        'gst_percentage': p.gst_percentage,
        'current_stock': p.inventory[0].current_stock if p.inventory else 0,
        'stock_status': p.inventory[0].stock_status if p.inventory else 'out'
    } for p in products])

@app.route('/api/products', methods=['POST'])
@login_required
def add_product():
    data = request.json
    
    # Check if product already exists
    existing_product = Product.query.filter_by(
        product_name=data['product_name'],
        brand_name=data['brand_name']
    ).first()
    
    if existing_product:
        # Update existing product
        existing_product.unit_price = float(data['unit_price'])
        existing_product.cost_price = float(data['cost_price'])
        existing_product.gst_percentage = float(data['gst_percentage'])
        
        # Update inventory
        inventory = existing_product.inventory[0]
        inventory.current_stock += int(data['current_stock'])
        inventory.reorder_level = int(data['reorder_level'])
        inventory.reorder_quantity = int(data['reorder_quantity'])
        inventory.supplier_name = data['supplier_name']
        inventory.lead_time = int(data['lead_time'])
        inventory.last_restocked = datetime.utcnow()
        
        # Update stock status
        if inventory.current_stock <= 0:
            inventory.stock_status = 'out'
        elif inventory.current_stock <= inventory.reorder_level:
            inventory.stock_status = 'low'
        else:
            inventory.stock_status = 'ok'
    else:
        # Create new product
        product = Product(
            product_name=data['product_name'],
            brand_name=data['brand_name'],
            category=data['category'],
            subcategory=data['subcategory'],
            unit_price=float(data['unit_price']),
            cost_price=float(data['cost_price']),
            gst_percentage=float(data['gst_percentage'])
        )
        db.session.add(product)
        db.session.flush()  # Get the product ID
        
        # Create inventory record
        inventory = Inventory(
            product_id=product.id,
            current_stock=int(data['current_stock']),
            reorder_level=int(data['reorder_level']),
            reorder_quantity=int(data['reorder_quantity']),
            supplier_name=data['supplier_name'],
            lead_time=int(data['lead_time']),
            last_restocked=datetime.utcnow()
        )
        
        # Set initial stock status
        if inventory.current_stock <= 0:
            inventory.stock_status = 'out'
        elif inventory.current_stock <= inventory.reorder_level:
            inventory.stock_status = 'low'
        else:
            inventory.stock_status = 'ok'
        
        db.session.add(inventory)
    
    db.session.commit()
    return jsonify({'message': 'Product saved successfully'})

@app.route('/api/sales', methods=['POST'])
@login_required
def create_sale():
    data = request.json
    transaction_id = f"TRX{datetime.utcnow().strftime('%Y%m%d%H%M%S')}"
    
    try:
        # Create transaction records for each product
        for item in data['items']:
            product = Product.query.get(item['product_id'])
            if not product:
                return jsonify({'error': f'Product {item["product_id"]} not found'}), 404
            
            inventory = product.inventory[0]
            if inventory.current_stock < item['quantity']:
                return jsonify({'error': f'Insufficient stock for {product.product_name}'}), 400
            
            # Calculate prices
            unit_price = product.unit_price
            quantity = item['quantity']
            subtotal = unit_price * quantity
            gst_amount = subtotal * (product.gst_percentage / 100)
            discount = subtotal * (item.get('discount', 0) / 100)
            total = subtotal + gst_amount - discount
            
            # Create transaction record
            transaction = Transaction(
                transaction_id=transaction_id,
                product_id=product.id,
                date=datetime.utcnow(),
                units_sold=quantity,
                discount_percentage=item.get('discount', 0),
                discounted_price=unit_price * (1 - item.get('discount', 0) / 100),
                total_revenue=subtotal,
                gst_amount=gst_amount,
                total_revenue_incl_gst=total,
                customer_type=data.get('customer_type', 'regular'),
                payment_method=data['payment_method']
            )
            db.session.add(transaction)
            
            # Update inventory
            inventory.current_stock -= quantity
            if inventory.current_stock <= 0:
                inventory.stock_status = 'out'
            elif inventory.current_stock <= inventory.reorder_level:
                inventory.stock_status = 'low'
            else:
                inventory.stock_status = 'ok'
        
        db.session.commit()
        return jsonify({
            'message': 'Sale completed successfully',
            'transaction_id': transaction_id
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@app.route('/api/products/search', methods=['GET'])
@login_required
def search_products():
    query = request.args.get('q', '')
    category = request.args.get('category', '')
    stock_status = request.args.get('stock_status', '')
    
    products_query = Product.query
    
    if query:
        products_query = products_query.filter(
            (Product.product_name.ilike(f'%{query}%')) |
            (Product.brand_name.ilike(f'%{query}%'))
        )
    
    if category:
        products_query = products_query.filter(Product.category == category)
    
    products = products_query.all()
    
    # Filter by stock status if needed
    if stock_status:
        products = [p for p in products if p.inventory and p.inventory[0].stock_status == stock_status]
    
    return jsonify([{
        'id': p.id,
        'name': p.product_name,
        'brand': p.brand_name,
        'category': p.category,
        'subcategory': p.subcategory,
        'unit_price': p.unit_price,
        'gst_percentage': p.gst_percentage,
        'current_stock': p.inventory[0].current_stock if p.inventory else 0,
        'stock_status': p.inventory[0].stock_status if p.inventory else 'out',
        'reorder_level': p.inventory[0].reorder_level if p.inventory else 0
    } for p in products])

@app.route('/api/sold_products', methods=['GET'])
@login_required
def api_sold_products():
    transactions = Transaction.query.order_by(Transaction.date.desc()).all()
    sold_products = []
    for t in transactions:
        sold_products.append({
            'date': t.date.isoformat() if t.date else '',
            'product_name': t.product.product_name if t.product else '',
            'brand': t.product.brand_name if t.product else '',
            'category': t.product.category if t.product else '',
            'units_sold': t.units_sold,
            'customer_type': t.customer_type,
            'payment_method': t.payment_method,
            'total_revenue_incl_gst': t.total_revenue_incl_gst
        })
    return jsonify(sold_products)

if __name__ == '__main__':
    load_data()
    app.run(debug=True)


----- File: D:\ML Folders\ml_env\GitHub\Hero-Product-Recommendation\copy_utils.py -----
import os

# Root directory to start searching from
ROOT_DIR = r"D:\ML Folders\ml_env\GitHub\Hero-Product-Recommendation"
# File extensions to include
INCLUDE_EXTENSIONS = {'.py', '.js', '.css', '.html', '.txt','.yml','sql'}

# Output file where combined code will be saved
OUTPUT_FILE = os.path.join(ROOT_DIR, "all_code_snippets.txt")

def should_include(file_name):
    return os.path.splitext(file_name)[1] in INCLUDE_EXTENSIONS

def copy_code_snippets():
    with open(OUTPUT_FILE, 'w', encoding='utf-8') as outfile:
        for dirpath, _, filenames in os.walk(ROOT_DIR):
            for filename in filenames:
                if should_include(filename):
                    file_path = os.path.join(dirpath, filename)
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            content = f.read()
                            outfile.write(f"\n\n----- File: {file_path} -----\n")
                            outfile.write(content)
                    except Exception as e:
                        print(f"Could not read {file_path}: {e}")

    print(f"\n✅ Code snippets copied to: {OUTPUT_FILE}")

if __name__ == "__main__":
    copy_code_snippets()


----- File: D:\ML Folders\ml_env\GitHub\Hero-Product-Recommendation\requirements.txt -----
Flask==3.0.2
Flask-SQLAlchemy==3.1.1
pandas==2.2.1
numpy==1.26.4
scikit-learn==1.3.2
matplotlib==3.8.3
seaborn==0.13.2
Werkzeug==3.0.1
python-dateutil==2.8.2
openpyxl==3.1.2
gunicorn==21.2.0 

----- File: D:\ML Folders\ml_env\GitHub\Hero-Product-Recommendation\requirements_flask.txt -----
Flask==3.0.0
Werkzeug==3.0.1 

----- File: D:\ML Folders\ml_env\GitHub\Hero-Product-Recommendation\requirements_streamlit.txt -----
streamlit>=1.33.0
pandas>=2.0.0
numpy>=1.24.0
pillow>=10.0.0
requests>=2.31.0
python-dateutil>=2.8.2 

----- File: D:\ML Folders\ml_env\GitHub\Hero-Product-Recommendation\streamlitapp.py -----
import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import io
import base64
from PIL import Image
import requests
from urllib.parse import urlparse

# Set page configuration
st.set_page_config(
    page_title="Rohit Electronics Inventory",
    page_icon="📱",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for better styling
st.markdown("""
<style>
    .stButton>button {
        width: 100%;
    }
    .expiry-warning {
        color: #ff4b4b;
        font-weight: bold;
    }
    .low-stock {
        color: #ff4b4b;
        font-weight: bold;
    }
    .product-card {
        background-color: #f0f2f6;
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 10px;
    }
    .product-image {
        max-width: 100%;
        height: auto;
        border-radius: 5px;
    }
    .badge {
        display: inline-block;
        padding: 3px 8px;
        border-radius: 12px;
        font-size: 0.8em;
        margin-left: 5px;
    }
    .badge-warning {
        background-color: #ffcc00;
        color: #000;
    }
    .badge-danger {
        background-color: #ff4b4b;
        color: #fff;
    }
    .badge-info {
        background-color: #00ccff;
        color: #000;
    }
</style>
""", unsafe_allow_html=True)

# Initialize session state with specific dataset structure
if "product_data" not in st.session_state:
    try:
        # Load the specific dataset
        df = pd.read_csv("Datasets\\rohit_electronics_sales_data.csv")
        
        # Ensure all required columns are present
        required_columns = [
            "Transaction ID", "Date", "Product Category", "Subcategory", "Product Name",
            "Brand Name", "Units Sold", "Unit Price", "Discount", "Discounted Price",
            "Total Revenue", "GST_Percentage", "GST_Amount", "Total_Revenue_Incl_GST",
            "Current Stock", "Stock_Status", "Rating", "Returns", "Customer Type",
            "Region", "Payment Method"
        ]
        
        # Validate data types
        df["Date"] = pd.to_datetime(df["Date"])
        df["Units Sold"] = pd.to_numeric(df["Units Sold"], errors='coerce')
        df["Unit Price"] = pd.to_numeric(df["Unit Price"], errors='coerce')
        df["Discount"] = pd.to_numeric(df["Discount"], errors='coerce')
        df["Current Stock"] = pd.to_numeric(df["Current Stock"], errors='coerce')
        df["Rating"] = pd.to_numeric(df["Rating"], errors='coerce')
        
        st.session_state.product_data = df
    except Exception as e:
        st.error(f"Error loading dataset: {str(e)}")
        st.session_state.product_data = pd.DataFrame(columns=required_columns)

# Function to save data
def save_data():
    st.session_state.product_data.to_csv("inventory_data.csv", index=False)

# Function to validate image URL
def is_valid_image_url(url):
    if not url:
        return False
    try:
        result = urlparse(url)
        return all([result.scheme, result.netloc])
    except:
        return False

# Function to get image from URL with caching
@st.cache_data(ttl=3600)  # Cache for 1 hour
def get_image_from_url(url):
    if not url or not is_valid_image_url(url):
        return None
    try:
        response = requests.get(url, stream=True, timeout=5)
        response.raise_for_status()  # Raise an exception for bad status codes
        return Image.open(io.BytesIO(response.content))
    except (requests.RequestException, IOError, Image.UnidentifiedImageError) as e:
        st.warning(f"Failed to load image from URL: {url}")
        return None

# Function to check if stock is low
def is_low_stock(stock, threshold=30):
    return stock < threshold

# Function to validate product data
def validate_product_data(data):
    errors = []
    
    # Required fields based on dataset
    required_fields = [
        "Product Name", "Product Category", "Subcategory", "Brand Name",
        "Units Sold", "Unit Price", "Current Stock"
    ]
    
    for field in required_fields:
        if not data.get(field):
            errors.append(f"{field} is required")
    
    # Numeric validation
    try:
        units = int(data.get("Units Sold", 0))
        if units < 0:
            errors.append("Units Sold cannot be negative")
    except ValueError:
        errors.append("Units Sold must be a valid number")
    
    try:
        price = float(data.get("Unit Price", 0))
        if price < 0:
            errors.append("Unit Price cannot be negative")
    except ValueError:
        errors.append("Unit Price must be a valid number")
    
    try:
        stock = int(data.get("Current Stock", 0))
        if stock < 0:
            errors.append("Current Stock cannot be negative")
    except ValueError:
        errors.append("Current Stock must be a valid number")
    
    # Category validation
    valid_categories = ['Mobiles', 'Laptop Accessories', 'Mobile Accessories', 'Laptops']
    if data.get("Product Category") not in valid_categories:
        errors.append(f"Product Category must be one of: {', '.join(valid_categories)}")
    
    return errors

# Function to validate CSV data
def validate_csv_data(df):
    required_columns = ["Product Name", "Product Category", "Current Stock", "Unit Price"]
    errors = []
    
    # Check required columns
    missing_columns = [col for col in required_columns if col not in df.columns]
    if missing_columns:
        errors.append(f"Missing required columns: {', '.join(missing_columns)}")
    
    # Check data types
    try:
        df["Current Stock"] = pd.to_numeric(df["Current Stock"], errors='raise')
        if (df["Current Stock"] < 0).any():
            errors.append("Stock values cannot be negative")
    except ValueError:
        errors.append("Stock values must be numeric")
    
    try:
        df["Unit Price"] = pd.to_numeric(df["Unit Price"], errors='raise')
        if (df["Unit Price"] < 0).any():
            errors.append("Price values cannot be negative")
    except ValueError:
        errors.append("Price values must be numeric")
    
    return errors

# Function to perform search with specific categories
def perform_search(df, search_term, category_filter=None, subcategory_filter=None, low_stock_filter=False):
    if not search_term and not category_filter and not subcategory_filter and not low_stock_filter:
        return df
    
    mask = pd.Series(True, index=df.index)
    
    if search_term:
        search_mask = (
            df['Product Name'].str.contains(search_term, case=False, na=False) |
            df['Brand Name'].str.contains(search_term, case=False, na=False) |
            df['Product Category'].str.contains(search_term, case=False, na=False) |
            df['Subcategory'].str.contains(search_term, case=False, na=False)
        )
        mask &= search_mask
    
    if category_filter and category_filter != "All":
        mask &= df['Product Category'] == category_filter
    
    if subcategory_filter and subcategory_filter != "All":
        mask &= df['Subcategory'] == subcategory_filter
    
    if low_stock_filter:
        mask &= df['Current Stock'] < 30
    
    return df[mask]

# Main app
df = st.session_state.product_data
st.title("📱 Rohit Electronics Inventory Dashboard")

# Sidebar - Upload CSV
with st.sidebar:
    st.header("Import Inventory CSV")
uploaded_file = st.file_uploader("📁 Import CSV", type=["csv"])
if uploaded_file:
        try:
            df_uploaded = pd.read_csv(uploaded_file)
            errors = validate_csv_data(df_uploaded)
            if errors:
                for error in errors:
                    st.error(error)
            else:
                st.session_state.product_data = pd.concat([df, df_uploaded], ignore_index=True)
                save_data()  # Save the updated data
                st.success("CSV data imported successfully!")
        except Exception as e:
            st.error(f"Error reading CSV file: {str(e)}")

# Filters
st.subheader("🔍 Filter Options")
col1, col2, col3, col4 = st.columns(4)
        with col1:
    search_term = st.text_input("Search Products")
        with col2:
    category_filter = st.selectbox(
        "Filter by Category",
        options=["All"] + sorted(df['Product Category'].unique().tolist())
    )
        with col3:
    # Only show subcategories for selected category
    if category_filter != "All":
        subcategories = ["All"] + sorted(df[df['Product Category'] == category_filter]['Subcategory'].unique().tolist())
    else:
        subcategories = ["All"] + sorted(df['Subcategory'].unique().tolist())
    subcategory_filter = st.selectbox("Filter by Subcategory", options=subcategories)
with col4:
    low_stock_filter = st.checkbox("Show only low stock (<30)")

# Apply filters
filtered_data = perform_search(
    df,
    search_term,
    None if category_filter == "All" else category_filter,
    None if subcategory_filter == "All" else subcategory_filter,
    low_stock_filter
)

# Product Display
st.subheader("📦 Product Inventory")
if len(filtered_data) == 0:
    st.info("No matching products found.")
else:
for idx, row in filtered_data.iterrows():
    with st.container():
            st.markdown('<div class="product-card">', unsafe_allow_html=True)
            col1, col2 = st.columns([1, 3])

            with col1:
                # Display product image if available
                if pd.notna(row.get('Image URL')) and is_valid_image_url(row['Image URL']):
                    img = get_image_from_url(row['Image URL'])
                    if img:
                        st.image(img, use_column_width=True)
                    else:
                        st.image("https://via.placeholder.com/150", use_column_width=True)
                else:
                    st.image("https://via.placeholder.com/150", use_column_width=True)

            with col2:
                # Product details
                st.markdown(f"**Product Name:** {row['Product Name']}")
                st.markdown(f"**Brand:** {row['Brand Name']} | **Category:** {row['Product Category']}")
                st.markdown(f"**Subcategory:** {row['Subcategory']}")
                
                # Stock information with warning badges
                stock_status = f"**Stock:** {row['Current Stock']}"
                if row['Current Stock'] < 30:
                    stock_status += ' <span class="badge badge-danger">Low Stock</span>'
                elif row['Current Stock'] == 0:
                    stock_status += ' <span class="badge badge-danger">Out of Stock</span>'
                st.markdown(stock_status, unsafe_allow_html=True)
                
                # Sales information
                st.markdown(f"**Units Sold:** {row['Units Sold']}")
                st.markdown(f"**Price:** ₹{row['Unit Price']:,.2f}")
                if row['Discount'] > 0:
                    st.markdown(f"**Discount:** {row['Discount']}% | **Discounted Price:** ₹{row['Discounted Price']:,.2f}")
                
                # Financial information
                st.markdown(f"**GST:** {row['GST_Percentage']}% | **GST Amount:** ₹{row['GST_Amount']:,.2f}")
                st.markdown(f"**Total Revenue (incl. GST):** ₹{row['Total_Revenue_Incl_GST']:,.2f}")
                
                # Additional information
                st.markdown(f"**Rating:** {row['Rating']} ⭐")
                st.markdown(f"**Customer Type:** {row['Customer Type']}")
                st.markdown(f"**Payment Method:** {row['Payment Method']}")
                st.markdown(f"**Region:** {row['Region']}")

            st.markdown('</div>', unsafe_allow_html=True)

# Export Buttons
st.subheader("📤 Export Inventory")
col1, col2 = st.columns(2)
with col1:
    st.download_button(
        "Download Full CSV",
        df.to_csv(index=False),
        file_name="rohit_inventory_full.csv",
        mime="text/csv"
    )
with col2:
    st.download_button(
        "Download Filtered CSV",
        filtered_data.to_csv(index=False),
        file_name="rohit_inventory_filtered.csv",
        mime="text/csv"
    )

# Footer
st.markdown("---")
st.markdown("🛍️ Rohit Electronics | Vending UI Inventory Dashboard")

# Update the manual entry form section
with st.form("product_form"):
    # ... existing form fields ...
    
    if st.form_submit_button("Add Product"):
        new_product = {
            "Product Name": product_name,
            "Product Category": category,
            "Current Stock": stock,
            "Unit Price": price,
            "Date": date,
            "Image URL": image_url
            # ... other fields ...
        }
        
        errors = validate_product_data(new_product)
        if errors:
            for error in errors:
                st.error(error)
        else:
            # Add the product to the DataFrame
            st.session_state.product_data = pd.concat([
                st.session_state.product_data,
                pd.DataFrame([new_product])
            ], ignore_index=True)
            save_data()  # Save the updated data
            st.success("Product added successfully!")

# Add summary statistics section
st.subheader("📊 Summary Statistics")

# Create columns for different metrics
col1, col2, col3, col4 = st.columns(4)

with col1:
    st.metric("Total Products", len(df))
    st.metric("Total Revenue", f"₹{df['Total_Revenue_Incl_GST'].sum():,.2f}")

with col2:
    st.metric("Average Rating", f"{df['Rating'].mean():.1f} ⭐")
    st.metric("Total Units Sold", f"{df['Units Sold'].sum():,}")

with col3:
    low_stock = len(df[df['Current Stock'] < 30])
    st.metric("Low Stock Items", low_stock)
    st.metric("Out of Stock Items", len(df[df['Current Stock'] == 0]))

with col4:
    st.metric("Average Discount", f"{df['Discount'].mean():.1f}%")
    st.metric("Total GST Collected", f"₹{df['GST_Amount'].sum():,.2f}")

# Add visualizations
st.subheader("📈 Product Analysis")

# Category distribution
st.write("### Product Categories")
category_counts = df['Product Category'].value_counts()
st.bar_chart(category_counts)

# Stock status distribution
st.write("### Stock Status")
stock_status = df['Stock_Status'].value_counts()
st.bar_chart(stock_status)

# Price distribution
st.write("### Price Distribution")
st.line_chart(df['Unit Price'].value_counts().sort_index())

# Rating distribution
st.write("### Rating Distribution")
rating_counts = df['Rating'].value_counts().sort_index()
st.bar_chart(rating_counts)

# Payment method distribution
st.write("### Payment Methods")
payment_counts = df['Payment Method'].value_counts()
st.pie_chart(payment_counts)

----- File: D:\ML Folders\ml_env\GitHub\Hero-Product-Recommendation\AI  Powered  Product Recommendation System\ai_powered_product_recommendation_system.py -----
# -*- coding: utf-8 -*-
"""AI  Powered  Product Recommendation System

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10umHH-KU5kiW8YyxeQ5MNsw-wCx1aHIs
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, r2_score
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# Load and preprocess data
def load_data():
    df = pd.read_csv('/content/rohit_electronics_sales_1000.csv')
    df['Date'] = pd.to_datetime(df['Date'])
    df['Month'] = df['Date'].dt.month
    df['DayOfWeek'] = df['Date'].dt.dayofweek
    df['Revenue_Per_Unit'] = df['Total_Revenue_Incl_GST'] / df['Current Stock'].replace(0, 1)
    df['Popularity'] = df['Rating'] * df['Total_Revenue_Incl_GST']
    df['Stock_Status'] = df['Current Stock'].apply(lambda x: 'Low' if x <= 5 else 'OK')
    return df

# Build and evaluate model
def build_model(df):
    features = ['Product Category', 'Subcategory', 'Brand Name',
                'Unit Price', 'Discount (%)', 'Current Stock',
                'Month', 'DayOfWeek', 'Rating']
    target = 'Revenue_Per_Unit'

    X_train, X_test, y_train, y_test = train_test_split(
        df[features], df[target], test_size=0.2, random_state=42)

    preprocessor = ColumnTransformer([
        ('num', StandardScaler(), ['Unit Price', 'Discount (%)', 'Current Stock', 'Month', 'DayOfWeek', 'Rating']),
        ('cat', OneHotEncoder(handle_unknown='ignore'), ['Product Category', 'Subcategory', 'Brand Name'])
    ])

    model = Pipeline([
        ('preprocessor', preprocessor),
        ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))
    ])

    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    return model, mae, r2

def get_inputs():
    print("Please enter your filters (press Enter to skip):")
    time_frame = input("Time frame (1-365days): ").strip()
    category = input("Product Category (Mobile, Laptop , Mobile Accessories, Laptop Accessories): ").strip()
    min_price = input("Min Price (₹): ").strip()
    max_price = input("Max Price (₹): ").strip()
    min_rating = input("Minimum Rating (0-5): ").strip()
    include_low_stock = input("Include low stock? (y/n): ").strip().lower()

    return {
        'time_frame': int(time_frame) if time_frame else None,
        'category': category if category else None,
        'min_price': float(min_price) if min_price else 0,
        'max_price': float(max_price) if max_price else float('inf'),
        'min_rating': float(min_rating) if min_rating else 0,
        'include_low_stock': include_low_stock == 'y'
    }

def filter_data(df, params):
    filtered = df.copy()

    if params['time_frame']:
        cutoff_date = datetime.now() - timedelta(days=params['time_frame'])
        filtered = filtered[filtered['Date'] >= cutoff_date]

    if params['category']:
        filtered = filtered[filtered['Product Category'].str.contains(params['category'], case=False)]

    filtered = filtered[
        (filtered['Unit Price'] >= params['min_price']) &
        (filtered['Unit Price'] <= params['max_price']) &
        (filtered['Rating'] >= params['min_rating'])
    ]

    if not params['include_low_stock']:
        filtered = filtered[filtered['Stock_Status'] == 'OK']

    return filtered

def calculate_confidence(predictions):
    min_pred, max_pred = predictions.min(), predictions.max()
    return (predictions - min_pred) / (max_pred - min_pred)

def recommend_trending(df, category):
    recent_days = 30
    recent_cutoff = datetime.now() - timedelta(days=recent_days)
    recent_data = df[df['Date'] >= recent_cutoff]

    if category:
        recent_data = recent_data[recent_data['Product Category'].str.contains(category, case=False)]

    trending = recent_data.groupby('Product Name').agg({
        'Total_Revenue_Incl_GST': 'sum',
        'Rating': 'mean',
        'Current Stock': 'mean',
        'Product Category': 'first',
        'Brand Name': 'first',
        'Unit Price': 'mean'
    }).reset_index()

    trending['Trending_Score'] = trending['Total_Revenue_Incl_GST'] * trending['Rating']
    trending_sorted = trending.sort_values(by='Trending_Score', ascending=False).head(5)

    print("\n🔥 Trending Products (last 30 days) in selected category:")
    print(trending_sorted[['Product Name', 'Brand Name', 'Unit Price', 'Rating', 'Total_Revenue_Incl_GST']].to_string(index=False, formatters={
        'Unit Price': '{:,.2f}'.format,
        'Total_Revenue_Incl_GST': '{:,.2f}'.format
    }))

    for _, row in trending_sorted.iterrows():
        avg_stock = row['Current Stock']
        reorder_qty = 20 if avg_stock < 10 else 10
        print(f"🔁 Suggestion: Reorder '{row['Product Name']}' → Qty: {reorder_qty}")

def bcg_matrix(df, category):
    if category:
        df = df[df['Product Category'].str.contains(category, case=False)]

    df['Revenue_Per_Unit'] = df['Total_Revenue_Incl_GST'] / df['Current Stock'].replace(0, 1)
    df['Sales'] = df['Total_Revenue_Incl_GST']
    df['Profit'] = df['Revenue_Per_Unit'] * df['Current Stock']

    stars = df[(df['Sales'] > df['Sales'].median()) & (df['Profit'] > df['Profit'].median())]
    cows = df[(df['Profit'] > df['Profit'].median()) & (df['Sales'] <= df['Sales'].median())]
    question_marks = df[(df['Sales'] <= df['Sales'].median()) & (df['Profit'] > df['Profit'].median())]
    dogs = df[(df['Sales'] <= df['Sales'].median()) & (df['Profit'] <= df['Profit'].median())]

    print("\n🌟 **BCG Matrix Recommendations** 🌟")

    print("\n⭐ **Stars (High Sales, High Profit)**:")
    print(stars[['Product Name', 'Brand Name', 'Unit Price', 'Sales', 'Profit']].head(5).to_string(index=False, formatters={
        'Unit Price': '{:,.2f}'.format,
        'Sales': '{:,.2f}'.format,
        'Profit': '{:,.2f}'.format
    }))

    print("\n🐄 **Cash Cows (High Profit, Stable Sales)**:")
    print(cows[['Product Name', 'Brand Name', 'Unit Price', 'Sales', 'Profit']].head(5).to_string(index=False, formatters={
        'Unit Price': '{:,.2f}'.format,
        'Sales': '{:,.2f}'.format,
        'Profit': '{:,.2f}'.format
    }))

    print("\n❓ **Question Marks (Potential to Grow)**:")
    print(question_marks[['Product Name', 'Brand Name', 'Unit Price', 'Sales', 'Profit']].head(5).to_string(index=False, formatters={
        'Unit Price': '{:,.2f}'.format,
        'Sales': '{:,.2f}'.format,
        'Profit': '{:,.2f}'.format
    }))

    print("\n🐕 **Dogs (Low Sales, Low Profit)**:")
    print(dogs[['Product Name', 'Brand Name', 'Unit Price', 'Sales', 'Profit']].head(5).to_string(index=False, formatters={
        'Unit Price': '{:,.2f}'.format,
        'Sales': '{:,.2f}'.format,
        'Profit': '{:,.2f}'.format
    }))

def main():
    df = load_data()
    model, mae, r2 = build_model(df)

    print(f"\nModel Accuracy Scores:")
    print(f"- Mean Absolute Error: ₹{mae:.2f}")
    print(f"- R² Score: {r2:.2f} (1.0 is perfect)")

    params = get_inputs()
    filtered_df = filter_data(df, params)

    if len(filtered_df) == 0:
        print("\nNo products match your criteria!")
        return

    features = ['Product Category', 'Subcategory', 'Brand Name',
                'Unit Price', 'Discount (%)', 'Current Stock',
                'Month', 'DayOfWeek', 'Rating']

    predictions = model.predict(filtered_df[features])
    filtered_df['Predicted_Score'] = predictions
    filtered_df['Confidence'] = calculate_confidence(predictions)

    top_products_grouped = (
        filtered_df.sort_values('Predicted_Score', ascending=False)
        .groupby(['Product Name', 'Brand Name'], as_index=False)
        .first()
    )

    top_5_unique_products = top_products_grouped.sort_values('Predicted_Score', ascending=False).head(5)

    print("\n🔍 Top Hero Product Recommendations:")
    print(top_5_unique_products[['Product Name', 'Brand Name', 'Unit Price', 'Rating', 'Predicted_Score', 'Confidence']].to_string(index=False, formatters={
        'Unit Price': '{:,.2f}'.format,
        'Predicted_Score': '{:,.2f}'.format,
        'Confidence': '{:.2f}'.format
    }))


    see_trending = input("\nWould you like to see trending products and smart reorder suggestions? (y/n): ").strip().lower()
    if see_trending == 'y':
        recommend_trending(df, params['category'])



    see_bcg = input("\nWould you like to see BCG Matrix Product Recommendations? (y/n): ").strip().lower()
    if see_bcg == 'y':
        bcg_matrix(df, params['category'])


    print("\nThank you for using the product recommendation system. Have a great day!")

if __name__ == "__main__":
    main()

----- File: D:\ML Folders\ml_env\GitHub\Hero-Product-Recommendation\python\ai_powered_product_recommendation_system.py -----
# -*- coding: utf-8 -*-
"""AI  Powered  Product Recommendation System

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10umHH-KU5kiW8YyxeQ5MNsw-wCx1aHIs
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, r2_score
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# Load and preprocess data
def load_data():
    df = pd.read_csv('/content/rohit_electronics_sales_1000.csv')
    df['Date'] = pd.to_datetime(df['Date'])
    df['Month'] = df['Date'].dt.month
    df['DayOfWeek'] = df['Date'].dt.dayofweek
    df['Revenue_Per_Unit'] = df['Total_Revenue_Incl_GST'] / df['Current Stock'].replace(0, 1)
    df['Popularity'] = df['Rating'] * df['Total_Revenue_Incl_GST']
    df['Stock_Status'] = df['Current Stock'].apply(lambda x: 'Low' if x <= 5 else 'OK')
    return df

# Build and evaluate model
def build_model(df):
    features = ['Product Category', 'Subcategory', 'Brand Name',
                'Unit Price', 'Discount (%)', 'Current Stock',
                'Month', 'DayOfWeek', 'Rating']
    target = 'Revenue_Per_Unit'

    X_train, X_test, y_train, y_test = train_test_split(
        df[features], df[target], test_size=0.2, random_state=42)

    preprocessor = ColumnTransformer([
        ('num', StandardScaler(), ['Unit Price', 'Discount (%)', 'Current Stock', 'Month', 'DayOfWeek', 'Rating']),
        ('cat', OneHotEncoder(handle_unknown='ignore'), ['Product Category', 'Subcategory', 'Brand Name'])
    ])

    model = Pipeline([
        ('preprocessor', preprocessor),
        ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))
    ])

    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    return model, mae, r2

def get_inputs():
    print("Please enter your filters (press Enter to skip):")
    time_frame = input("Time frame (1-365days): ").strip()
    category = input("Product Category (Mobile, Laptop , Mobile Accessories, Laptop Accessories): ").strip()
    min_price = input("Min Price (₹): ").strip()
    max_price = input("Max Price (₹): ").strip()
    min_rating = input("Minimum Rating (0-5): ").strip()
    include_low_stock = input("Include low stock? (y/n): ").strip().lower()

    return {
        'time_frame': int(time_frame) if time_frame else None,
        'category': category if category else None,
        'min_price': float(min_price) if min_price else 0,
        'max_price': float(max_price) if max_price else float('inf'),
        'min_rating': float(min_rating) if min_rating else 0,
        'include_low_stock': include_low_stock == 'y'
    }

def filter_data(df, params):
    filtered = df.copy()

    if params['time_frame']:
        cutoff_date = datetime.now() - timedelta(days=params['time_frame'])
        filtered = filtered[filtered['Date'] >= cutoff_date]

    if params['category']:
        filtered = filtered[filtered['Product Category'].str.contains(params['category'], case=False)]

    filtered = filtered[
        (filtered['Unit Price'] >= params['min_price']) &
        (filtered['Unit Price'] <= params['max_price']) &
        (filtered['Rating'] >= params['min_rating'])
    ]

    if not params['include_low_stock']:
        filtered = filtered[filtered['Stock_Status'] == 'OK']

    return filtered

def calculate_confidence(predictions):
    min_pred, max_pred = predictions.min(), predictions.max()
    return (predictions - min_pred) / (max_pred - min_pred)

def recommend_trending(df, category):
    recent_days = 30
    recent_cutoff = datetime.now() - timedelta(days=recent_days)
    recent_data = df[df['Date'] >= recent_cutoff]

    if category:
        recent_data = recent_data[recent_data['Product Category'].str.contains(category, case=False)]

    trending = recent_data.groupby('Product Name').agg({
        'Total_Revenue_Incl_GST': 'sum',
        'Rating': 'mean',
        'Current Stock': 'mean',
        'Product Category': 'first',
        'Brand Name': 'first',
        'Unit Price': 'mean'
    }).reset_index()

    trending['Trending_Score'] = trending['Total_Revenue_Incl_GST'] * trending['Rating']
    trending_sorted = trending.sort_values(by='Trending_Score', ascending=False).head(5)

    print("\n🔥 Trending Products (last 30 days) in selected category:")
    print(trending_sorted[['Product Name', 'Brand Name', 'Unit Price', 'Rating', 'Total_Revenue_Incl_GST']].to_string(index=False, formatters={
        'Unit Price': '{:,.2f}'.format,
        'Total_Revenue_Incl_GST': '{:,.2f}'.format
    }))

    for _, row in trending_sorted.iterrows():
        avg_stock = row['Current Stock']
        reorder_qty = 20 if avg_stock < 10 else 10
        print(f"🔁 Suggestion: Reorder '{row['Product Name']}' → Qty: {reorder_qty}")

def bcg_matrix(df, category):
    if category:
        df = df[df['Product Category'].str.contains(category, case=False)]

    df['Revenue_Per_Unit'] = df['Total_Revenue_Incl_GST'] / df['Current Stock'].replace(0, 1)
    df['Sales'] = df['Total_Revenue_Incl_GST']
    df['Profit'] = df['Revenue_Per_Unit'] * df['Current Stock']

    stars = df[(df['Sales'] > df['Sales'].median()) & (df['Profit'] > df['Profit'].median())]
    cows = df[(df['Profit'] > df['Profit'].median()) & (df['Sales'] <= df['Sales'].median())]
    question_marks = df[(df['Sales'] <= df['Sales'].median()) & (df['Profit'] > df['Profit'].median())]
    dogs = df[(df['Sales'] <= df['Sales'].median()) & (df['Profit'] <= df['Profit'].median())]

    print("\n🌟 **BCG Matrix Recommendations** 🌟")

    print("\n⭐ **Stars (High Sales, High Profit)**:")
    print(stars[['Product Name', 'Brand Name', 'Unit Price', 'Sales', 'Profit']].head(5).to_string(index=False, formatters={
        'Unit Price': '{:,.2f}'.format,
        'Sales': '{:,.2f}'.format,
        'Profit': '{:,.2f}'.format
    }))

    print("\n🐄 **Cash Cows (High Profit, Stable Sales)**:")
    print(cows[['Product Name', 'Brand Name', 'Unit Price', 'Sales', 'Profit']].head(5).to_string(index=False, formatters={
        'Unit Price': '{:,.2f}'.format,
        'Sales': '{:,.2f}'.format,
        'Profit': '{:,.2f}'.format
    }))

    print("\n❓ **Question Marks (Potential to Grow)**:")
    print(question_marks[['Product Name', 'Brand Name', 'Unit Price', 'Sales', 'Profit']].head(5).to_string(index=False, formatters={
        'Unit Price': '{:,.2f}'.format,
        'Sales': '{:,.2f}'.format,
        'Profit': '{:,.2f}'.format
    }))

    print("\n🐕 **Dogs (Low Sales, Low Profit)**:")
    print(dogs[['Product Name', 'Brand Name', 'Unit Price', 'Sales', 'Profit']].head(5).to_string(index=False, formatters={
        'Unit Price': '{:,.2f}'.format,
        'Sales': '{:,.2f}'.format,
        'Profit': '{:,.2f}'.format
    }))

def main():
    df = load_data()
    model, mae, r2 = build_model(df)

    print(f"\nModel Accuracy Scores:")
    print(f"- Mean Absolute Error: ₹{mae:.2f}")
    print(f"- R² Score: {r2:.2f} (1.0 is perfect)")

    params = get_inputs()
    filtered_df = filter_data(df, params)

    if len(filtered_df) == 0:
        print("\nNo products match your criteria!")
        return

    features = ['Product Category', 'Subcategory', 'Brand Name',
                'Unit Price', 'Discount (%)', 'Current Stock',
                'Month', 'DayOfWeek', 'Rating']

    predictions = model.predict(filtered_df[features])
    filtered_df['Predicted_Score'] = predictions
    filtered_df['Confidence'] = calculate_confidence(predictions)

    top_products_grouped = (
        filtered_df.sort_values('Predicted_Score', ascending=False)
        .groupby(['Product Name', 'Brand Name'], as_index=False)
        .first()
    )

    top_5_unique_products = top_products_grouped.sort_values('Predicted_Score', ascending=False).head(5)

    print("\n🔍 Top Hero Product Recommendations:")
    print(top_5_unique_products[['Product Name', 'Brand Name', 'Unit Price', 'Rating', 'Predicted_Score', 'Confidence']].to_string(index=False, formatters={
        'Unit Price': '{:,.2f}'.format,
        'Predicted_Score': '{:,.2f}'.format,
        'Confidence': '{:.2f}'.format
    }))


    see_trending = input("\nWould you like to see trending products and smart reorder suggestions? (y/n): ").strip().lower()
    if see_trending == 'y':
        recommend_trending(df, params['category'])



    see_bcg = input("\nWould you like to see BCG Matrix Product Recommendations? (y/n): ").strip().lower()
    if see_bcg == 'y':
        bcg_matrix(df, params['category'])


    print("\nThank you for using the product recommendation system. Have a great day!")

if __name__ == "__main__":
    main()

----- File: D:\ML Folders\ml_env\GitHub\Hero-Product-Recommendation\python\creating_inventory_dataset.py -----
from faker import Faker
import pandas as pd
import random

# Initialize Faker
fake = Faker('en_IN')  # Use Indian locale for more realistic data

# List of products with subcategories and brands
products = [
    ('Apple', 'Smartphones', 'Mobiles'),
    ('Samsung', 'Smartphones', 'Mobiles'),
    ('Xiaomi', 'Smartphones', 'Mobiles'),
    ('Realme', 'Smartphones', 'Mobiles'),
    ('Vivo', 'Smartphones', 'Mobiles'),
    ('Nothing', 'Smartphones', 'Mobiles'),
    ('Jio', 'Feature Phones', 'Mobiles'),
    ('ASUS', 'Gaming', 'Laptops'),
    ('MSI', 'Gaming', 'Laptops'),
    ('HP', 'Business', 'Laptops'),
    ('Dell', 'Business', 'Laptops'),
    ('Lenovo', 'Business', 'Laptops'),
    ('Acer', 'Student', 'Laptops'),
    ('Boat', 'Chargers', 'Mobile Accessories'),
    ('Realme', 'Earphones', 'Mobile Accessories'),
    ('Samsung', 'Screen Protectors', 'Mobile Accessories'),
    ('Mi', 'Cases', 'Mobile Accessories'),
    ('Logitech', 'Mouse', 'Laptop Accessories'),
    ('HP', 'Keyboard', 'Laptop Accessories'),
    ('Dell', 'Bags', 'Laptop Accessories'),
    ('Zebronics', 'Cooling Pads', 'Laptop Accessories')
]

# Generate random suppliers
suppliers = [fake.company() for _ in range(10)]

# Function to generate inventory data
def generate_inventory_data(products):
    inventory_data = []

    for brand, subcategory, category in products:
        product_id = fake.unique.random_int(min=1000, max=9999)
        product_name = f"{brand} {subcategory} {fake.random_int(min=1, max=100)}"
        
        # Set realistic price ranges based on brand and category
        if category == 'Mobiles':
            if subcategory == 'Feature Phones':
                unit_price = round(random.uniform(1000, 3000), 2)
            else:
                unit_price = round(random.uniform(65000, 130000), 2)
        elif category == 'Laptops':
            unit_price = round(random.uniform(20000, 100000), 2)
        else:  # Mobile Accessories and Laptop Accessories
            unit_price = round(random.uniform(500, 5000), 2)
        
        cost_price = round(unit_price * random.uniform(0.7, 0.9), 2)
        selling_price = round(unit_price * random.uniform(1.1, 1.3), 2)
        
        # Apply GST based on subcategory
        gst = 12 if subcategory == 'Feature Phones' else 18
        
        # Discount logic with festival boosts
        discount = random.choices([0, 5, 10, 15, 20], weights=[50, 20, 15, 10, 5])[0]
        
        current_stock = random.randint(0, 100)
        reorder_level = random.randint(5, 20)
        reorder_quantity = random.randint(10, 50)
        stock_status = 'Low' if current_stock < 10 else 'In Stock' if current_stock > 0 else 'Out of Stock'
        
        supplier = random.choice(suppliers)
        lead_time = random.randint(1, 7)

        inventory_data.append({
            'Product ID': product_id,
            'Product Name': product_name,
            'Brand Name': brand,
            'Product Category': category,
            'Subcategory': subcategory,
            'Current Stock': current_stock,
            'Reorder Level': reorder_level,
            'Reorder Quantity': reorder_quantity,
            'Stock Status': stock_status,
            'Unit Price': unit_price,
            'Cost Price': cost_price,
            'Selling Price': selling_price,
            'Discount (%)': discount,
            'GST (%)': gst,
            'Supplier Name': supplier,
            'Lead Time': lead_time
        })

    return pd.DataFrame(inventory_data)

# Generate the inventory dataset
inventory_df = generate_inventory_data(products)

# Display the generated inventory data
print(inventory_df)
import os
# Save the CSV
dataset_dir = "D:\ML Folders\ml_env\GitHub\Hero-Product-Recommendation\Datasets"
os.makedirs(dataset_dir, exist_ok=True)
csv_path = os.path.join(dataset_dir, "inventory_data_new1.csv")
inventory_df.to_csv(csv_path, index=False)

----- File: D:\ML Folders\ml_env\GitHub\Hero-Product-Recommendation\python\data_create.py -----
import pandas as pd
import random
from faker import Faker
from datetime import datetime, timedelta
import os

fake = Faker()
Faker.seed(42)
random.seed(42)

# Constants
brands = {
    "Smartphones": ["Apple", "Samsung", "Xiaomi", "Realme", "Vivo", "Nothing"],
    "Feature Phones": ["Jio"],
    "Gaming": ["ASUS", "MSI", "HP"],
    "Business": ["Dell", "HP", "Lenovo"],
    "Student": ["Acer", "Lenovo", "HP"],
    "Mobile Accessories": ["Boat", "Realme", "Samsung", "Mi"],
    "Laptop Accessories": ["Logitech", "HP", "Dell", "Zebronics"]
}

product_types = {
    "Mobiles": ["Smartphones", "Feature Phones"],
    "Laptops": ["Gaming", "Business", "Student"],
    "Mobile Accessories": ["Chargers", "Earphones", "Screen Protectors", "Cases"],
    "Laptop Accessories": ["Mouse", "Keyboard", "Bags", "Cooling Pads"]
}

gst_rates = {
    "Smartphones": 0.18,
    "Feature Phones": 0.12,
    "Gaming": 0.18,
    "Business": 0.18,
    "Student": 0.18,
    "Mobile Accessories": 0.18,
    "Laptop Accessories": 0.18
}

# Generate price ranges per brand
brand_price_range = {
    "Apple": (65000, 130000),
    "Samsung": (20000, 80000),
    "Xiaomi": (8000, 20000),
    "Realme": (8000, 20000),
    "Vivo": (8000, 20000),
    "Nothing": (25000, 50000),
    "Jio": (1000, 3000),
    "ASUS": (70000, 150000),
    "MSI": (80000, 160000),
    "HP": (30000, 100000),
    "Dell": (35000, 90000),
    "Lenovo": (30000, 85000),
    "Acer": (25000, 70000),
    "Boat": (500, 2000),
    "Mi": (500, 2000),
    "Logitech": (700, 3000),
    "Zebronics": (600, 2500)
}

payment_methods = ["Cash", "UPI", "Card"]
customer_types = ["New", "Returning"]

def generate_transaction_id(index):
    return f"TXN{100000 + index}"

def generate_data_for_day(date, transactions_per_day=30):
    data = []
    for i in range(transactions_per_day):
        main_category = random.choice(list(product_types.keys()))
        subcategory = random.choice(product_types[main_category])
        brand = random.choice(brands.get(subcategory, brands.get(main_category, ["Generic"])))
        product_name = f"{brand} {subcategory} {random.randint(100, 999)}"
        units_sold = random.randint(1, 5) if main_category in ["Mobiles", "Laptops"] else random.randint(1, 15)
        unit_price = random.randint(*brand_price_range.get(brand, (500, 2000)))
        discount = random.choices([0, 5, 10, 15, 20], weights=[50, 20, 15, 10, 5])[0]

        # Festival offer boost
        if date.month == 1 and date.day in range(24, 27):  # Republic Day
            discount += 5
        elif date.month == 3 and date.day in range(15, 18):  # Holi
            discount += 5
        discount = min(discount, 30)

        discounted_price = unit_price * (1 - discount / 100)
        total_revenue = discounted_price * units_sold
        gst_rate = gst_rates.get(subcategory, 0.18)
        gst_amount = total_revenue * gst_rate
        total_revenue_gst = total_revenue + gst_amount

        current_stock = random.randint(0, 100)
        stock_status = "In Stock" if current_stock > 30 else "Low Stock" if current_stock > 0 else "Out of Stock"

        data.append({
            "Transaction ID": generate_transaction_id(i),
            "Date": date.strftime("%Y-%m-%d"),
            "Product Category": main_category,
            "Subcategory": subcategory,
            "Product Name": product_name,
            "Brand Name": brand,
            "Units Sold": units_sold,
            "Unit Price": unit_price,
            "Discount (%)": discount,
            "Discounted Price": round(discounted_price, 2),
            "Total Revenue": round(total_revenue, 2),
            "GST_Percentage": int(gst_rate * 100),
            "GST_Amount": round(gst_amount, 2),
            "Total_Revenue_Incl_GST": round(total_revenue_gst, 2),
            "Current Stock": current_stock,
            "Stock_Status": stock_status,
            "Rating": round(random.uniform(2.5, 5.0), 1),
            "Returns": random.choices([0, 1], weights=[90, 10])[0],
            "Customer Type": random.choice(customer_types),
            "Region": "Main Market - Rohit Electronics",
            "Payment Method": random.choice(payment_methods)
        })
    return data

# Generate for past 3 months
end_date = datetime.now().date()
start_date = end_date - timedelta(days=90)
all_data = []
current_date = start_date

while current_date <= end_date:
    transactions_today = random.randint(20, 50)
    all_data.extend(generate_data_for_day(current_date, transactions_today))
    current_date += timedelta(days=1)

# Convert to DataFrame
df = pd.DataFrame(all_data)

# Save the CSV
dataset_dir = "D:\ML Folders\ml_env\GitHub\Hero-Product-Recommendation\Datasets"
os.makedirs(dataset_dir, exist_ok=True)
csv_path = os.path.join(dataset_dir, "rohit_electronics_sales_data.csv")
df.to_csv(csv_path, index=False)

csv_path



----- File: D:\ML Folders\ml_env\GitHub\Hero-Product-Recommendation\python\updated_datacreate.py -----
import os
import random
import pandas as pd
from faker import Faker
from datetime import datetime, timedelta

fake = Faker()

# Ensure the Datasets directory exists
output_dir = "Datasets"
os.makedirs(output_dir, exist_ok=True)

# Product structure
categories = {
    'Mobiles': ['Smartphone', 'Feature Phone'],
    'Laptop Accessories': ['Mouse', 'Keyboard', 'Charger', 'Bag'],
    'Mobile Accessories': ['Earbuds', 'Cable', 'Charger', 'Case'],
    'Laptops': ['Gaming Laptop', 'Ultrabook', 'Notebook']
}

brands = {
    'Mobiles': ['Apple', 'Samsung', 'Xiaomi', 'Realme', 'Jio', 'Vivo', 'Nothing', 'Mi'],
    'Laptops': ['HP', 'Dell', 'MSI', 'ASUS', 'Acer', 'Lenovo'],
    'Mobile Accessories': ['Boat', 'Zebronics', 'Realme', 'Logitech'],
    'Laptop Accessories': ['Logitech', 'Zebronics', 'HP', 'Dell']
}

# Generate 50 unique products only
unique_products = []
product_id = 1
while len(unique_products) < 50:
    category = random.choice(list(categories.keys()))
    subcategory = random.choice(categories[category])
    brand = random.choice(brands[category])
    name = f"{brand} {subcategory} {product_id}"
    if name not in unique_products:
        unique_products.append({
            'Category': category,
            'Subcategory': subcategory,
            'Brand': brand,
            'ProductName': name,
            'Price': random.randint(5000, 120000) if category == 'Mobiles' else
                     random.randint(25000, 180000) if category == 'Laptops' else
                     random.randint(200, 5000),
            'Stock': random.randint(15, 60)
        })
        product_id += 1

# Helper for GST
def get_gst(category):
    return 12 if category == 'Mobiles' else 18

# Ratings and returns logic
def generate_rating():
    return round(random.uniform(1.0, 5.0), 1)

def generate_return(rating):
    if rating <= 2.0:
        return random.choices([0, 1], weights=[60, 40])[0]
    return random.choices([0, 1], weights=[95, 5])[0]

# Customer and payment method
customer_types = ['New', 'Returning', 'Regular', 'Wholesale']
payment_methods = ['Cash', 'UPI', 'Credit Card', 'Debit Card', 'Net Banking']
customer_weights = [0.3, 0.25, 0.35, 0.1]
payment_weights = [0.15, 0.4, 0.2, 0.2, 0.05]

# Generate transactions
records = []
transaction_id = 1

while len(records) < 2000:
    product = random.choice(unique_products)
    if product['Stock'] <= 0:
        continue  # Skip out-of-stock

    transaction_code = f"T{str(transaction_id).zfill(4)}"
    date = fake.date_time_between(start_date='-30d', end_date='now')
    unit_price = product['Price']
    discount = random.randint(0, 30)
    discounted_price = round(unit_price * (1 - discount / 100), 2)
    gst_percent = get_gst(product['Category'])
    gst_amount = round(discounted_price * gst_percent / 100, 2)
    total_incl_gst = round(discounted_price + gst_amount, 2)
    stock = product['Stock'] - 1
    stock_status = 'OK' if stock > 10 else 'Low Stock' if stock > 0 else 'Out of Stock'
    rating = generate_rating()
    returned = generate_return(rating)
    cust_type = random.choices(customer_types, weights=customer_weights)[0]
    payment = random.choices(payment_methods, weights=payment_weights)[0]

    # Append record
    records.append({
        'Transaction ID': transaction_code,
        'Date': date.strftime('%Y-%m-%d %H:%M:%S'),
        'Product Category': product['Category'],
        'Subcategory': product['Subcategory'],
        'Product Name': product['ProductName'],
        'Brand Name': product['Brand'],
        'Unit Price': unit_price,
        'Discount (%)': discount,
        'Discounted Price': discounted_price,
        'Total Revenue': discounted_price,
        'GST_Percentage': gst_percent,
        'GST_Amount': gst_amount,
        'Total_Revenue_Incl_GST': total_incl_gst,
        'Current Stock': stock,
        'Stock_Status': stock_status,
        'Rating': rating,
        'Returns': returned,
        'Customer Type': cust_type,
        'Payment Method': payment
    })

    product['Stock'] -= 1
    transaction_id += 1

# Save to CSV at specified path
df = pd.DataFrame(records)
file_path = r"D:\ML Folders\ml_env\GitHub\Hero-Product-Recommendation\Datasets\rohit_electronics_sales.csv"
df.to_csv(file_path, index=False)
print(f"Dataset saved to {file_path}")

# # Save to CSV in current directory
# df = pd.DataFrame(records)
# file_path = "rohit_electronics_sales.csv"
# df.to_csv(file_path, index=False)
# print(f"Dataset saved to {file_path}")

----- File: D:\ML Folders\ml_env\GitHub\Hero-Product-Recommendation\static\dashboard.js -----


----- File: D:\ML Folders\ml_env\GitHub\Hero-Product-Recommendation\static\css\styles.css -----
/* Base styles */
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    margin: 0;
    padding: 20px;
    background-color: #f5f6fa;
    color: #2c3e50;
}

.container {
    max-width: 1400px;
    margin: 0 auto;
}

/* Home button */
.home-button {
    display: inline-block;
    padding: 10px 20px;
    background-color: #3498db;
    color: white;
    text-decoration: none;
    border-radius: 4px;
    margin-bottom: 20px;
    transition: background-color 0.3s;
}

.home-button:hover {
    background-color: #2980b9;
}

/* Headings */
h2 {
    color: #2c3e50;
    margin-bottom: 30px;
    font-size: 28px;
}

/* Filters */
.filters {
    display: flex;
    gap: 20px;
    margin-bottom: 30px;
    flex-wrap: wrap;
}

.filter-group {
    display: flex;
    align-items: center;
    gap: 10px;
}

select, input {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background-color: white;
    font-size: 14px;
}

/* KPI Grid */
.kpi-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 20px;
    margin-bottom: 30px;
}

.kpi-card {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.kpi-title {
    font-size: 14px;
    color: #7f8c8d;
    margin-bottom: 10px;
}

.kpi-value {
    font-size: 24px;
    font-weight: bold;
    color: #2c3e50;
    margin-bottom: 5px;
}

.kpi-trend {
    font-size: 12px;
    display: flex;
    align-items: center;
    gap: 5px;
}

.trend-up {
    color: #27ae60;
}

.trend-down {
    color: #e74c3c;
}

/* Chart Grid */
.chart-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 30px;
    margin-top: 30px;
}

.chart-container {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    height: 400px;
}

.chart-title {
    font-size: 16px;
    font-weight: bold;
    color: #2c3e50;
    margin-bottom: 20px;
    display: flex;
    align-items: center;
    gap: 10px;
}

/* Export Buttons */
.export-buttons {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
}

.export-button {
    padding: 8px 16px;
    background-color: #3498db;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
}

.export-button:hover {
    background-color: #2980b9;
}

/* Responsive Design */
@media (max-width: 1200px) {
    .kpi-grid {
        grid-template-columns: repeat(2, 1fr);
    }
    
    .chart-grid {
        grid-template-columns: repeat(2, 1fr);
    }
}

@media (max-width: 768px) {
    .kpi-grid {
        grid-template-columns: 1fr;
    }
    
    .chart-grid {
        grid-template-columns: 1fr;
    }
    
    .filters {
        flex-direction: column;
    }
    
    .filter-group {
        width: 100%;
    }
    
    select, input {
        width: 100%;
    }
} 

----- File: D:\ML Folders\ml_env\GitHub\Hero-Product-Recommendation\static\js\inventory.js -----
// Global variables
let products = [];
let categories = new Set();

// Initialize the page
function initializePage() {
    loadProducts();
    setupEventListeners();
}

// Load all products
function loadProducts(searchQuery = '') {
    const category = document.getElementById('categoryFilter').value;
    const stockStatus = document.getElementById('stockFilter').value;
    
    // Build query parameters
    const params = new URLSearchParams();
    if (searchQuery) params.append('q', searchQuery);
    if (category) params.append('category', category);
    if (stockStatus) params.append('stock_status', stockStatus);

    // Fetch products from API
    fetch(`/api/products/search?${params.toString()}`)
        .then(response => response.json())
        .then(products => {
            const productGrid = document.getElementById('productGrid');
            productGrid.innerHTML = '';

            products.forEach(product => {
                const card = createProductCard(product);
                productGrid.appendChild(card);
            });
        })
        .catch(error => {
            console.error('Error loading products:', error);
            alert('Error loading products. Please try again.');
        });
}

// Update product dropdowns in the sale form
function updateProductDropdowns() {
    const productSelects = document.querySelectorAll('select[name="products[]"]');
    productSelects.forEach(select => {
        select.innerHTML = '<option value="">Select Product</option>';
        products.forEach(product => {
            if (product.current_stock > 0) {
                const option = document.createElement('option');
                option.value = product.id;
                option.textContent = `${product.name} (${product.brand}) - ₹${product.unit_price}`;
                option.dataset.price = product.unit_price;
                option.dataset.gst = product.gst_percentage;
                select.appendChild(option);
            }
        });
    });
}

// Update category filter dropdown
function updateCategoryFilter() {
    const categoryFilter = document.getElementById('categoryFilter');
    categories.clear();
    products.forEach(product => categories.add(product.category));
    
    categoryFilter.innerHTML = '<option value="">All Categories</option>';
    categories.forEach(category => {
        const option = document.createElement('option');
        option.value = category;
        option.textContent = category;
        categoryFilter.appendChild(option);
    });
}

// Display products in the product grid
function displayProducts(filteredProducts = products) {
    const productGrid = document.getElementById('productGrid');
    productGrid.innerHTML = '';
    
    filteredProducts.forEach(product => {
        const card = document.createElement('div');
        card.className = 'col-md-4 mb-4';
        card.innerHTML = `
            <div class="product-card">
                <h5>${product.name}</h5>
                <p class="mb-1">Brand: ${product.brand}</p>
                <p class="mb-1">Category: ${product.category}</p>
                <p class="mb-1">Price: ₹${product.unit_price}</p>
                <p class="mb-1">GST: ${product.gst_percentage}%</p>
                <p class="mb-1">Stock: ${product.current_stock}</p>
                <span class="stock-status stock-${product.stock_status}">
                    ${product.stock_status.toUpperCase()}
                </span>
            </div>
        `;
        productGrid.appendChild(card);
    });
}

// Filter products based on search and filters
function filterProducts() {
    const searchQuery = document.getElementById('productSearch').value.toLowerCase();
    const categoryFilter = document.getElementById('categoryFilter').value;
    const stockFilter = document.getElementById('stockFilter').value;
    
    const filteredProducts = products.filter(product => {
        const matchesSearch = product.name.toLowerCase().includes(searchQuery) ||
                            product.brand.toLowerCase().includes(searchQuery);
        const matchesCategory = !categoryFilter || product.category === categoryFilter;
        const matchesStock = !stockFilter || product.stock_status === stockFilter;
        
        return matchesSearch && matchesCategory && matchesStock;
    });
    
    displayProducts(filteredProducts);
}

// Calculate order summary
function calculateOrderSummary() {
    const orderSummary = document.getElementById('orderSummary');
    const productItems = document.querySelectorAll('.product-item');
    let subtotal = 0;
    let totalGST = 0;
    let total = 0;
    
    productItems.forEach(item => {
        const productSelect = item.querySelector('select[name="products[]"]');
        const quantityInput = item.querySelector('input[name="quantities[]"]');
        
        if (productSelect.value && quantityInput.value) {
            const product = products.find(p => p.id === parseInt(productSelect.value));
            const quantity = parseInt(quantityInput.value);
            
            if (product) {
                const itemSubtotal = product.unit_price * quantity;
                const itemGST = itemSubtotal * (product.gst_percentage / 100);
                
                subtotal += itemSubtotal;
                totalGST += itemGST;
            }
        }
    });
    
    total = subtotal + totalGST;
    
    orderSummary.innerHTML = `
        <div class="row">
            <div class="col-6">Subtotal:</div>
            <div class="col-6 text-end">₹${subtotal.toFixed(2)}</div>
        </div>
        <div class="row">
            <div class="col-6">GST:</div>
            <div class="col-6 text-end">₹${totalGST.toFixed(2)}</div>
        </div>
        <div class="row fw-bold">
            <div class="col-6">Total:</div>
            <div class="col-6 text-end">₹${total.toFixed(2)}</div>
        </div>
    `;
}

// Handle sale form submission
function handleSaleSubmit(event) {
    event.preventDefault();
    
    const formData = new FormData(event.target);
    const items = [];
    
    document.querySelectorAll('.product-item').forEach(item => {
        const productId = item.querySelector('select[name="products[]"]').value;
        const quantity = item.querySelector('input[name="quantities[]"]').value;
        
        if (productId && quantity) {
            items.push({
                product_id: parseInt(productId),
                quantity: parseInt(quantity)
            });
        }
    });
    
    const saleData = {
        customer_name: formData.get('customer_name'),
        phone: formData.get('phone'),
        payment_method: formData.get('payment_method'),
        items: items
    };
    
    fetch('/api/sales', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(saleData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.error) {
            alert(data.error);
        } else {
            alert('Sale completed successfully!');
            event.target.reset();
            loadProducts();
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('An error occurred while processing the sale.');
    });
}

// Handle restock form submission
function handleRestockSubmit(event) {
    event.preventDefault();
    
    const formData = new FormData(event.target);
    const productData = {
        product_name: formData.get('product_name'),
        brand_name: formData.get('brand_name'),
        category: formData.get('category'),
        subcategory: formData.get('subcategory'),
        unit_price: formData.get('unit_price'),
        cost_price: formData.get('cost_price'),
        gst_percentage: formData.get('gst_percentage'),
        current_stock: formData.get('current_stock'),
        reorder_level: formData.get('reorder_level'),
        reorder_quantity: formData.get('reorder_quantity'),
        supplier_name: formData.get('supplier_name'),
        lead_time: formData.get('lead_time')
    };
    
    fetch('/api/products', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(productData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.error) {
            alert(data.error);
        } else {
            alert('Product saved successfully!');
            event.target.reset();
            loadProducts();
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('An error occurred while saving the product.');
    });
}

// Setup event listeners
function setupEventListeners() {
    // Sale form
    document.getElementById('saleForm').addEventListener('submit', handleSaleSubmit);
    document.getElementById('addProduct').addEventListener('click', () => {
        const productList = document.getElementById('productList');
        const newItem = productList.children[0].cloneNode(true);
        newItem.querySelector('select').value = '';
        newItem.querySelector('input').value = '';
        productList.appendChild(newItem);
        updateProductDropdowns();
    });
    
    // Restock form
    document.getElementById('restockForm').addEventListener('submit', handleRestockSubmit);
    
    // Product search and filters
    document.getElementById('productSearch').addEventListener('input', filterProducts);
    document.getElementById('categoryFilter').addEventListener('change', filterProducts);
    document.getElementById('stockFilter').addEventListener('change', filterProducts);
    
    // Calculate order summary when products or quantities change
    document.getElementById('productList').addEventListener('change', calculateOrderSummary);

    // View Report button
    document.getElementById('viewReport').addEventListener('click', function() {
        window.location.href = '/analytics';
    });
}

// Initialize the page when the DOM is loaded
document.addEventListener('DOMContentLoaded', initializePage);

function createProductCard(product) {
    const col = document.createElement('div');
    col.className = 'col-md-4 mb-4';

    const stockStatusClass = {
        'low': 'stock-low',
        'ok': 'stock-ok',
        'out': 'stock-out'
    }[product.stock_status] || 'stock-out';

    col.innerHTML = `
        <div class="product-card">
            <h5 class="card-title">${product.name}</h5>
            <p class="card-text">
                <strong>Brand:</strong> ${product.brand}<br>
                <strong>Category:</strong> ${product.category}<br>
                <strong>Price:</strong> ₹${product.unit_price.toFixed(2)}<br>
                <strong>Stock:</strong> ${product.current_stock} units<br>
                <span class="stock-status ${stockStatusClass}">
                    ${product.stock_status.toUpperCase()}
                </span>
            </p>
            <div class="d-flex justify-content-between">
                <button class="btn btn-sm btn-primary" onclick="editProduct(${product.id})">
                    <i class="fas fa-edit"></i> Edit
                </button>
                <button class="btn btn-sm btn-success" onclick="restockProduct(${product.id})">
                    <i class="fas fa-boxes"></i> Restock
                </button>
            </div>
        </div>
    `;

    return col;
}

function editProduct(productId) {
    // Switch to restock tab and populate form
    document.getElementById('restock-tab').click();
    // TODO: Implement form population
}

function restockProduct(productId) {
    // Switch to restock tab and populate form
    document.getElementById('restock-tab').click();
    // TODO: Implement form population
} 

----- File: D:\ML Folders\ml_env\GitHub\Hero-Product-Recommendation\templates\analytics.html -----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Electronics Sales Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
</head>
<body>
    <div class="container">
        <a href="/" class="home-button">← Back to Home</a>
        <h2>🛒 Electronics Sales Dashboard</h2>

        <div id="loadingIndicator" style="display: none; text-align: center; padding: 20px;">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Loading dashboard data...</p>
        </div>

        <div id="errorMessage" style="display: none; text-align: center; padding: 20px; color: red;">
            <p>Error loading dashboard data. Please try again.</p>
        </div>

        <div id="dashboardContent">
        <div class="filters">
            <div class="filter-group">
                <label for="dateRange">Date Range:</label>
                <select id="dateRange">
                    <option value="7">Last 7 Days</option>
                    <option value="30">Last 30 Days</option>
                    <option value="90">Last 90 Days</option>
                    <option value="365">Last Year</option>
                </select>
            </div>
            <div class="filter-group">
                <label for="categoryFilter">Category:</label>
                <select id="categoryFilter">
                    <option value="all">All Categories</option>
                    {% for category in categories %}
                    <option value="{{ category }}">{{ category }}</option>
                    {% endfor %}
                </select>
            </div>
            <div class="filter-group">
                <label for="comparePeriod">Compare With:</label>
                <select id="comparePeriod">
                    <option value="none">No Comparison</option>
                    <option value="previous">Previous Period</option>
                    <option value="year">Same Period Last Year</option>
                </select>
            </div>
        </div>

        <div class="export-buttons">
            <button class="export-button" onclick="exportData('csv')">Export as CSV</button>
            <button class="export-button" onclick="exportData('excel')">Export as Excel</button>
            <button class="export-button" onclick="exportData('pdf')">Export as PDF</button>
        </div>

        <div class="kpi-grid">
            <div class="kpi-card">
                <div class="kpi-title">Total Revenue</div>
                <div class="kpi-value" id="totalRevenue">₹0</div>
                <div class="kpi-trend trend-up" id="revenueTrend">
                    <span>↑ 0%</span>
                    <span>vs previous period</span>
                </div>
            </div>
            <div class="kpi-card">
                <div class="kpi-title">Average Order Value</div>
                <div class="kpi-value" id="avgOrderValue">₹0</div>
                <div class="kpi-trend trend-up" id="aovTrend">
                    <span>↑ 0%</span>
                    <span>vs previous period</span>
                </div>
            </div>
            <div class="kpi-card">
                <div class="kpi-title">Most Popular Product</div>
                <div class="kpi-value" id="popularProduct">-</div>
                <div class="kpi-trend" id="popularTrend">
                    <span>Units Sold: 0</span>
                </div>
            </div>
        </div>

        <div class="chart-grid">
            <div class="main-chart-container">
                <div class="chart-title">📊 Sales by Category</div>
                <canvas id="categoryChart"></canvas>
            </div>
            <div class="chart-container">
                <div class="chart-title">📈 Monthly Revenue Trend</div>
                <canvas id="revenueChart"></canvas>
            </div>
            <div class="chart-container">
                <div class="chart-title">📊 Customer Distribution</div>
                <canvas id="customerChart"></canvas>
            </div>
            <div class="chart-container">
                <div class="chart-title">📊 Top Selling Products</div>
                <canvas id="productChart"></canvas>
            </div>
            <div class="chart-container">
                <div class="chart-title">📊 Price Range Distribution</div>
                <canvas id="priceRangeChart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Initialize charts
        const charts = {};
        
        // Initialize charts and load data when page loads
        document.addEventListener('DOMContentLoaded', function() {
            initializeCharts();
            updateDashboard();  // Load initial data
        });
        
        function initializeCharts() {
            const chartConfigs = [
                { id: 'categoryChart', type: 'doughnut', title: 'Sales by Category' },
                { id: 'revenueChart', type: 'line', title: 'Monthly Revenue Trend' },
                { id: 'productChart', type: 'bar', title: 'Top Selling Products' },
                { id: 'customerChart', type: 'pie', title: 'Customer Distribution' },
                { id: 'priceRangeChart', type: 'bar', title: 'Price Range Distribution' }
            ];
            
            chartConfigs.forEach(config => {
                const ctx = document.getElementById(config.id).getContext('2d');
                charts[config.id] = new Chart(ctx, {
                    type: config.type,
                    data: {
                        labels: [],
                        datasets: [{
                            label: config.title,
                            data: [],
                            backgroundColor: getBackgroundColors(config.type),
                            borderColor: getBorderColors(config.type),
                            borderWidth: 2
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            title: {
                                display: true,
                                text: config.title,
                                font: { size: 16 }
                            },
                            legend: {
                                labels: {
                                    color: '#333'
                                }
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                grid: {
                                    color: 'rgba(0, 0, 0, 0.1)'
                                },
                                ticks: {
                                    color: '#333'
                                }
                            },
                            x: {
                                grid: {
                                    color: 'rgba(0, 0, 0, 0.1)'
                                },
                                ticks: {
                                    color: '#333'
                                }
                            }
                        }
                    }
                });
            });
        }
        
        function getBackgroundColors(type) {
            switch(type) {
                case 'doughnut':
                case 'pie':
                    return ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)'];
                case 'bar':
                    return 'rgba(54, 162, 235, 0.2)';
                case 'line':
                    return 'rgba(75, 192, 192, 0.2)';
                default:
                    return 'rgba(54, 162, 235, 0.2)';
            }
        }
        
        function getBorderColors(type) {
            switch(type) {
                case 'doughnut':
                case 'pie':
                    return ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)'];
                case 'bar':
                    return 'rgba(54, 162, 235, 1)';
                case 'line':
                    return 'rgba(75, 192, 192, 1)';
                default:
                    return 'rgba(54, 162, 235, 1)';
            }
        }
        
        // Add event listeners for filters
        document.getElementById('dateRange').addEventListener('change', updateDashboard);
        document.getElementById('categoryFilter').addEventListener('change', updateDashboard);
        document.getElementById('comparePeriod').addEventListener('change', updateDashboard);
        
        async function updateDashboard() {
            const loadingIndicator = document.getElementById('loadingIndicator');
            const errorMessage = document.getElementById('errorMessage');
            const dashboardContent = document.getElementById('dashboardContent');
            
            try {
                // Show loading indicator
                loadingIndicator.style.display = 'block';
                errorMessage.style.display = 'none';
                dashboardContent.style.opacity = '0.5';
                
            const dateRange = document.getElementById('dateRange').value;
            const category = document.getElementById('categoryFilter').value;
            const comparePeriod = document.getElementById('comparePeriod').value;
            
                const response = await fetch('/get_data', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        dateRange,
                        category,
                        comparePeriod
                    })
                });
                
                if (!response.ok) {
                    throw new Error('Failed to fetch data');
                }
                
                const data = await response.json();
                
                if (data.error) {
                    throw new Error(data.error);
                }
                
                // Update KPIs
                updateKPIs(data.kpis);
                
                // Update charts
                updateCharts(data.charts);
                
                // Hide loading indicator and show content
                loadingIndicator.style.display = 'none';
                dashboardContent.style.opacity = '1';
                
            } catch (error) {
                console.error('Error updating dashboard:', error);
                loadingIndicator.style.display = 'none';
                errorMessage.style.display = 'block';
                errorMessage.querySelector('p').textContent = `Error: ${error.message}`;
            }
        }
        
        function updateKPIs(kpis) {
            document.getElementById('totalRevenue').textContent = `₹${kpis.total_revenue.toLocaleString()}`;
            document.getElementById('avgOrderValue').textContent = `₹${kpis.avg_order_value.toLocaleString()}`;
            document.getElementById('popularProduct').textContent = kpis.popular_product;
        }
        
        function updateCharts(chartData) {
            // Update category chart
            charts.categoryChart.data.labels = Object.keys(chartData.revenueByCategory);
            charts.categoryChart.data.datasets[0].data = Object.values(chartData.revenueByCategory);
            charts.categoryChart.update();
            
            // Update revenue chart
            charts.revenueChart.data.labels = Object.keys(chartData.dailyRevenue);
            charts.revenueChart.data.datasets[0].data = Object.values(chartData.dailyRevenue);
            charts.revenueChart.update();
            
            // Update product chart
            charts.productChart.data.labels = Object.keys(chartData.topBrands);
            charts.productChart.data.datasets[0].data = Object.values(chartData.topBrands);
            charts.productChart.update();
            
            // Update customer chart
            charts.customerChart.data.labels = Object.keys(chartData.customerType);
            charts.customerChart.data.datasets[0].data = Object.values(chartData.customerType);
            charts.customerChart.update();
            
            // Update price range chart
            charts.priceRangeChart.data.labels = Object.keys(chartData.priceRange);
            charts.priceRangeChart.data.datasets[0].data = Object.values(chartData.priceRange);
            charts.priceRangeChart.update();
        }
        
        async function exportData(format) {
            const dateRange = document.getElementById('dateRange').value;
            const category = document.getElementById('categoryFilter').value;
            
            try {
                const response = await fetch('/export_data', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        format,
                        dateRange,
                        category
                    })
                });
                
                if (response.ok) {
                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `sales_data.${format}`;
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                    a.remove();
                } else {
                    alert('Error exporting data');
                }
            } catch (error) {
                console.error('Error exporting data:', error);
                alert('Error exporting data');
            }
        }
    </script>
    <style>
        .chart-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            grid-template-rows: auto auto auto;
            gap: 30px;
            margin-top: 30px;
        }

        .main-chart-container {
            background: white;
            border-radius: 10px;
            padding: 25px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            height: 500px;
            grid-column: 1 / span 2;
        }

        .chart-container {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            height: 500px;
        }

        .chart-container:nth-child(2) {
            grid-column: 1;
            grid-row: 2;
        }

        .chart-container:nth-child(3) {
            grid-column: 2;
            grid-row: 2;
        }

        .chart-container:nth-child(4) {
            grid-column: 1;
            grid-row: 3;
        }

        .chart-container:nth-child(5) {
            grid-column: 2;
            grid-row: 3;
        }

        .chart-title {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 15px;
            color: #333;
        }

        .kpi-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 30px;
            margin-bottom: 30px;
        }

        .kpi-card {
            background: white;
            border-radius: 10px;
            padding: 25px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .filters {
            display: flex;
            gap: 30px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }

        .filter-group {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .export-buttons {
            display: flex;
            gap: 15px;
            margin-bottom: 30px;
        }

        .export-button {
            padding: 10px 20px;
            background: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }

        .export-button:hover {
            background: #45a049;
        }

        select {
            padding: 10px;
            border-radius: 5px;
            border: 1px solid #ddd;
            font-size: 16px;
            min-width: 200px;
        }

        .home-button {
            display: inline-block;
            padding: 10px 20px;
            background: #2196F3;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            margin-bottom: 30px;
            font-size: 16px;
        }

        .home-button:hover {
            background: #1976D2;
        }

        h2 {
            color: #333;
            margin-bottom: 30px;
            font-size: 28px;
        }

        .container {
            max-width: 1800px;
            margin: 0 auto;
            padding: 30px;
        }

        /* Responsive adjustments */
        @media (max-width: 1600px) {
            .chart-grid {
                grid-template-columns: 1fr;
            }
            
            .main-chart-container {
                grid-column: 1;
            }
            
            .chart-container {
                grid-column: 1 !important;
            }
            
            .main-chart-container,
            .chart-container {
                height: 400px;
            }
        }

        @media (max-width: 1200px) {
            .main-chart-container,
            .chart-container {
                height: 350px;
            }
        }
    </style>
</body>
</html>

----- File: D:\ML Folders\ml_env\GitHub\Hero-Product-Recommendation\templates\base.html -----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Your DukaanBuddy{% endblock %}</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Poppins:400,500,700&display=swap">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
    <style>
        body {
            background-image: url('https://images.unsplash.com/photo-1550009158-9ebf69173e03?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2101&q=80');
            background-size: cover;
            background-attachment: fixed;
            background-position: center;
            background-blend-mode: normal;
            font-family: 'Poppins', -apple-system, BlinkMacSystemFont, sans-serif;
            color: #1a1a1a;
        }
        .navbar {
            background: rgba(44, 62, 80, 0.75);
            padding: 1rem 2rem;
            box-shadow: 0 4px 24px rgba(44,62,80,0.12);
            backdrop-filter: blur(12px);
            border-bottom: 1.5px solid rgba(255,255,255,0.12);
        }
        .nav-container {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .nav-brand {
            color: #fff;
            font-size: 1.7rem;
            font-weight: 700;
            text-decoration: none;
            letter-spacing: 1px;
            text-shadow: 0 2px 8px rgba(44,62,80,0.18);
        }
        .nav-links {
            display: flex;
            gap: 2rem;
            align-items: center;
        }
        .nav-link, .auth-link {
            color: #ecf0f1;
            text-decoration: none;
            font-weight: 500;
            transition: color 0.3s, border-bottom 0.3s;
            border-radius: 8px;
            padding: 0.3rem 1rem;
        }
        .nav-link:hover, .auth-link:hover {
            color: #6C5CE7;
            background: rgba(255,255,255,0.08);
        }
        .nav-link.active {
            color: #6C5CE7;
            border-bottom: 2px solid #6C5CE7;
            background: rgba(255,255,255,0.10);
        }
        .user-info {
            color: #ecf0f1;
            margin-right: 1rem;
        }
        .content {
            max-width: 1200px;
            margin: 2.5rem auto 0 auto;
            padding: 2.5rem 2rem;
            background: rgba(255,255,255,0.15);
            border-radius: 28px;
            box-shadow: 0 8px 32px rgba(44,62,80,0.10);
            backdrop-filter: blur(14px);
            border: 1.5px solid rgba(255,255,255,0.12);
        }
        .alert {
            border-radius: 8px;
            font-weight: 500;
            margin-bottom: 1.5rem;
        }
        @media (max-width: 768px) {
            .nav-container {
                flex-direction: column;
                gap: 1rem;
            }
            .nav-links {
                flex-direction: column;
                align-items: center;
                gap: 1rem;
            }
            .content {
                padding: 1.2rem 0.5rem;
            }
        }
    </style>
    {% block extra_css %}{% endblock %}
</head>
<body>
    <nav class="navbar">
        <div class="nav-container">
            <a href="{{ url_for('home') }}" class="nav-brand">Your DukaanBuddy</a>
            <div class="nav-links">
                <a href="{{ url_for('home') }}" class="nav-link {% if request.path == '/' %}active{% endif %}">Home</a>
                <a href="{{ url_for('inventory') }}" class="nav-link {% if request.path == '/inventory' %}active{% endif %}">Inventory</a>
                <a href="{{ url_for('model_page') }}" class="nav-link {% if request.path == '/model' %}active{% endif %}">Model</a>
                <!-- <a href="{{ url_for('analytics') }}" class="nav-link {% if request.path == '/analytics' %}active{% endif %}">Analytics</a> -->
                {% if session.get('user_id') %}
                    <span class="user-info">Welcome, {{ session.get('username') }}</span>
                    <a href="{{ url_for('logout') }}" class="auth-link">Logout</a>
                {% else %}
                    <a href="{{ url_for('login') }}" class="auth-link">Login</a>
                    <a href="{{ url_for('signup') }}" class="auth-link">Sign Up</a>
                {% endif %}
            </div>
        </div>
    </nav>

    <div class="content">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ category }}">{{ message }}</div>
                {% endfor %}
            {% endif %}
        {% endwith %}
        
        {% block content %}{% endblock %}
    </div>

    {% block extra_js %}{% endblock %}
</body>
</html> 

----- File: D:\ML Folders\ml_env\GitHub\Hero-Product-Recommendation\templates\home.html -----
{% extends "base.html" %}

{% block title %}AI Inventory Pro | Smart Stock Solutions{% endblock %}

{% block extra_css %}
<style>
    :root {
        --primary: #6C5CE7;
        --primary-dark: #5649BE;
        --accent: #FD79A8;
        --accent-dark: #E84393;
        --success: #00B894;
        --warning: #FDCB6E;
        --dark: #2D3436;
        --light: #F5F6FA;
        --gradient-primary: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
        --gradient-accent: linear-gradient(135deg, var(--accent) 0%, var(--accent-dark) 100%);
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: 'Poppins', -apple-system, BlinkMacSystemFont, sans-serif;
    }

    body {
        background-color: transparent;
        color: var(--dark);
        line-height: 1.7;
        overflow-x: hidden;
        background-image: url('https://images.unsplash.com/photo-1550009158-9ebf69173e03?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2101&q=80');
        background-size: cover;
        background-attachment: fixed;
        background-position: center;
        background-blend-mode: normal;
    }

    /* Hero Section */
    .hero {
        position: relative;
        height: 90vh;
        min-height: 700px;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
        color: white;
        overflow: hidden;
        background: linear-gradient(135deg, rgba(44, 62, 80, 0.95) 0%, rgba(52, 73, 94, 0.95) 100%), 
                    url('https://images.unsplash.com/photo-1519389950473-47ba0277781c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80') center/cover no-repeat;
        clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
        margin-bottom: 5rem;
    }

    .hero::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: radial-gradient(circle at 20% 50%, rgba(108, 92, 231, 0.2) 0%, transparent 50%);
    }

    .hero-content {
        max-width: 900px;
        padding: 3rem 2.5rem 2.5rem 2.5rem;
        position: relative;
        z-index: 2;
        animation: fadeInUp 1s ease;
        background: linear-gradient(120deg, rgba(255,255,255,0.18) 0%, rgba(108,92,231,0.10) 100%);
        box-shadow: 0 8px 40px 0 rgba(44,62,80,0.18), 0 1.5px 8px 0 rgba(44,62,80,0.10);
        border-radius: 32px;
        border: 1.5px solid rgba(255,255,255,0.18);
        backdrop-filter: blur(18px);
    }

    .hero-content h1 {
        font-size: 3.5rem;
        font-weight: 800;
        margin-bottom: 1.5rem;
        line-height: 1.2;
        text-shadow: 0 4px 24px rgba(44,62,80,0.18), 0 1.5px 8px rgba(44,62,80,0.10);
    }

    .hero p {
        font-size: 1.4rem;
        max-width: 700px;
        margin: 0 auto 3rem;
        opacity: 0.9;
        font-weight: 300;
    }

    /* Floating Tech Elements */
    .tech-floaters {
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        pointer-events: none;
        z-index: 1;
    }

    .tech-icon {
        position: absolute;
        opacity: 0.1;
        animation: float 15s infinite linear;
    }

    /* Button Styles (Keeping Navigation Buttons As Is) */
    .btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        padding: 1rem 2.5rem;
        font-size: 1.1rem;
        font-weight: 600;
        border-radius: 50px;
        text-decoration: none;
        transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        margin: 0.5rem;
        position: relative;
        overflow: hidden;
        z-index: 1;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    .btn::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        transition: 0.5s;
        z-index: -1;
    }

    .btn:hover::before {
        left: 100%;
    }

    .btn-primary {
        background: var(--gradient-primary);
        color: white;
    }

    .btn-primary:hover {
        transform: translateY(-3px);
        box-shadow: 0 10px 25px rgba(108, 92, 231, 0.4);
    }

    .btn-accent {
        background: var(--gradient-accent);
        color: white;
    }

    .btn-accent:hover {
        transform: translateY(-3px);
        box-shadow: 0 10px 25px rgba(253, 121, 168, 0.4);
    }

    .btn i {
        margin-left: 0.5rem;
        transition: transform 0.3s ease;
    }

    .btn:hover i {
        transform: translateX(5px);
    }

    /* Main Container */
    .container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 0 2rem;
        position: relative;
        z-index: 1;
    }

    /* Section Styling */
    .section {
        margin-bottom: 6rem;
        position: relative;
        padding: 2rem;
        border-radius: 24px;
        background: rgba(255, 255, 255, 0.15);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    }

    .section-header {
        text-align: center;
        margin-bottom: 4rem;
        padding: 2rem;
        background: rgba(255, 255, 255, 0.15);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .section-header h2 {
        font-size: 2.5rem;
        color: #1a1a1a;
        margin-bottom: 1rem;
        position: relative;
        display: inline-block;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        font-weight: 700;
    }

    .section-header h2::after {
        content: '';
        position: absolute;
        width: 60px;
        height: 4px;
        background: var(--primary);
        bottom: -10px;
        left: 50%;
        transform: translateX(-50%);
        border-radius: 2px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .section-header p {
        font-size: 1.2rem;
        color: #333;
        max-width: 700px;
        margin: 0 auto;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
        font-weight: 500;
    }

    /* Stats Cards */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 2rem;
        margin: 3rem 0;
    }

    .stat-card {
        background: rgba(255, 255, 255, 0.15);
        backdrop-filter: blur(12px);
        padding: 2.5rem 2rem;
        border-radius: 20px;
        text-align: center;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        transition: all 0.4s ease;
        position: relative;
        overflow: hidden;
        border: 1px solid rgba(255, 255, 255, 0.15);
    }

    .stat-card:nth-child(2) {
        border-top-color: var(--accent);
    }

    .stat-card:nth-child(3) {
        border-top-color: var(--success);
    }

    .stat-card:hover {
        transform: translateY(-10px);
        box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
        background: rgba(255, 255, 255, 0.2);
    }

    .stat-number {
        font-size: 3rem;
        font-weight: 700;
        margin: 1rem 0;
        background: var(--gradient-primary);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .stat-card:nth-child(2) .stat-number {
        background: var(--gradient-accent);
        -webkit-background-clip: text;
    }

    .stat-card:nth-child(3) .stat-number {
        background: linear-gradient(135deg, var(--success) 0%, #00a884 100%);
        -webkit-background-clip: text;
    }

    .stat-label {
        font-size: 1.1rem;
        color: #333;
        font-weight: 500;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
    }

    /* Features Grid */
    .features-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 2rem;
    }

    .feature-card {
        background: rgba(255, 255, 255, 0.15);
        backdrop-filter: blur(12px);
        padding: 2.5rem 2rem;
        border-radius: 20px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        transition: all 0.4s ease;
        position: relative;
        overflow: hidden;
        border: 1px solid rgba(255, 255, 255, 0.15);
    }

    .feature-card:hover {
        transform: translateY(-10px);
        box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
        background: rgba(255, 255, 255, 0.2);
    }

    .feature-icon {
        font-size: 2.5rem;
        margin-bottom: 1.5rem;
        display: inline-block;
        background: var(--gradient-primary);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }

    .feature-card:nth-child(2) .feature-icon {
        background: var(--gradient-accent);
        -webkit-background-clip: text;
    }

    .feature-card:nth-child(3) .feature-icon {
        background: linear-gradient(135deg, var(--warning) 0%, #f39c12 100%);
        -webkit-background-clip: text;
    }

    .feature-card h3 {
        font-size: 1.5rem;
        margin-bottom: 1rem;
        color: #1a1a1a;
        font-weight: 700;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    .feature-card p {
        color: #333;
        font-weight: 500;
        text-shadow: 0 1px 1px rgba(0, 0, 0, 0.05);
    }

    /* Products Showcase */
    .products-showcase {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 2rem;
        margin-top: 3rem;
    }

    .product-card {
        background: rgba(255, 255, 255, 0.15);
        backdrop-filter: blur(12px);
        border-radius: 20px;
        overflow: hidden;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        transition: all 0.4s ease;
        border: 1px solid rgba(255, 255, 255, 0.15);
    }

    .product-card:hover {
        transform: translateY(-10px);
        box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
        background: rgba(255, 255, 255, 0.2);
    }

    .product-image {
        height: 200px;
        background-size: cover;
        background-position: center;
    }

    .product-info {
        padding: 1.5rem;
        background: rgba(255, 255, 255, 0.15);
        backdrop-filter: blur(12px);
        border-top: 1px solid rgba(255, 255, 255, 0.15);
    }

    .product-info h4 {
        font-size: 1.2rem;
        margin-bottom: 0.5rem;
        color: #1a1a1a;
        font-weight: 700;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    .product-info p {
        color: #333;
        margin-bottom: 1rem;
        font-size: 0.9rem;
        font-weight: 500;
        text-shadow: 0 1px 1px rgba(0, 0, 0, 0.05);
    }

    .product-price {
        color: var(--primary);
        font-weight: 700;
        font-size: 1.3rem;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    /* Testimonials */
    .testimonials {
        background: linear-gradient(135deg, rgba(108, 92, 231, 0.95) 0%, rgba(86, 73, 190, 0.95) 100%);
        padding: 5rem 2rem;
        border-radius: 24px;
        margin: 5rem 0;
        color: white;
        position: relative;
        overflow: hidden;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .testimonial-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 2rem;
        position: relative;
        z-index: 1;
    }

    .testimonial-card {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(12px);
        padding: 2rem;
        border-radius: 20px;
        border: 1px solid rgba(255, 255, 255, 0.2);
        transition: all 0.4s ease;
    }

    .testimonial-card:hover {
        transform: translateY(-5px);
        background: rgba(255, 255, 255, 0.15);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);
    }

    .testimonial-text {
        font-style: italic;
        margin-bottom: 1.5rem;
    }

    .testimonial-author {
        display: flex;
        align-items: center;
    }

    .author-avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        margin-right: 1rem;
        background-size: cover;
        background-position: center;
    }

    .author-info h5 {
        font-size: 1.1rem;
        margin-bottom: 0.2rem;
    }

    .author-info p {
        opacity: 0.8;
        font-size: 0.9rem;
    }

    /* Footer */
    footer {
        background: linear-gradient(135deg, rgba(45, 52, 54, 0.95) 0%, rgba(52, 58, 64, 0.95) 100%);
        color: white;
        padding: 5rem 0 2rem;
        margin-top: 5rem;
        clip-path: polygon(0 5%, 100% 0, 100% 100%, 0% 100%);
        position: relative;
        box-shadow: 0 -8px 32px rgba(0, 0, 0, 0.15);
        border-top: 1px solid rgba(255, 255, 255, 0.1);
    }

    .footer-content {
        max-width: 1400px;
        margin: 0 auto;
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 3rem;
        padding: 0 2rem;
        position: relative;
        z-index: 1;
    }

    .footer-logo {
        height: 50px;
        margin-bottom: 1.5rem;
    }

    .footer-about p {
        opacity: 0.8;
        margin-bottom: 1.5rem;
        line-height: 1.7;
    }

    .social-links {
        display: flex;
        gap: 1rem;
    }

    .social-links a {
        color: white;
        background: rgba(255, 255, 255, 0.1);
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
    }

    .social-links a:hover {
        background: var(--accent);
        transform: translateY(-3px);
    }

    .footer-links h3 {
        color: white;
        margin-bottom: 1.5rem;
        font-size: 1.3rem;
        position: relative;
        padding-bottom: 0.5rem;
    }

    .footer-links h3::after {
        content: '';
        position: absolute;
        width: 40px;
        height: 3px;
        background: var(--accent);
        bottom: 0;
        left: 0;
    }

    .footer-links ul {
        list-style: none;
    }

    .footer-links li {
        margin-bottom: 0.8rem;
    }

    .footer-links a {
        color: rgba(255, 255, 255, 0.8);
        text-decoration: none;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
    }

    .footer-links a:hover {
        color: white;
        transform: translateX(5px);
    }

    .footer-links a i {
        margin-right: 0.5rem;
        color: var(--accent);
    }

    .copyright {
        text-align: center;
        margin-top: 4rem;
        padding-top: 2rem;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        opacity: 0.7;
        font-size: 0.9rem;
    }

    /* Animations */
    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    @keyframes fadeInUp {
        from { 
            opacity: 0;
            transform: translateY(30px);
        }
        to { 
            opacity: 1;
            transform: translateY(0);
        }
    }

    @keyframes float {
        0% { transform: translateY(0) rotate(0deg); }
        50% { transform: translateY(-20px) rotate(5deg); }
        100% { transform: translateY(0) rotate(0deg); }
    }

    /* Responsive Design */
    @media (max-width: 1200px) {
        .hero h1 {
            font-size: 3rem;
        }
    }

    @media (max-width: 992px) {
        .hero {
            height: auto;
            padding: 8rem 0;
        }
        
        .hero h1 {
            font-size: 2.5rem;
        }
    }

    @media (max-width: 768px) {
        .hero {
            clip-path: polygon(0 0, 100% 0, 100% 95%, 0 100%);
        }
        
        .hero h1 {
            font-size: 2.2rem;
        }
        
        .hero p {
            font-size: 1.2rem;
        }
        
        .section-header h2 {
            font-size: 2rem;
        }
    }

    @media (max-width: 576px) {
        .hero h1 {
            font-size: 2rem;
        }
        
        .hero p {
            font-size: 1.1rem;
        }
        
        .btn {
            display: block;
            margin: 0.5rem auto;
            max-width: 250px;
        }
        
        .stats-grid {
            grid-template-columns: 1fr;
        }
    }
</style>
{% endblock %}

{% block content %}
<!-- Hero Section -->
<div class="hero">
    <!-- Floating Tech Icons -->
    <div class="tech-floaters">
        <div class="tech-icon" style="top: 20%; left: 10%; font-size: 3rem; animation-delay: 0s;">📱</div>
        <div class="tech-icon" style="top: 30%; left: 80%; font-size: 4rem; animation-delay: 2s;">💻</div>
        <div class="tech-icon" style="top: 70%; left: 15%; font-size: 3.5rem; animation-delay: 4s;">⌚</div>
        <div class="tech-icon" style="top: 60%; left: 75%; font-size: 3rem; animation-delay: 6s;">🔌</div>
    </div>
    
    <div class="hero-content">
        <h1>Revolutionize Your Mobile & Laptop Inventory</h1>
        <p>AI-powered stock optimization that boosts sales by 35% and reduces excess inventory by 50% for electronics retailers</p>
        <div>
            <a href="/model" class="btn btn-primary">Get Smart Recommendations <i class="fas fa-arrow-right"></i></a>
            <a href="/analytics" class="btn btn-accent">View Real-time Analytics <i class="fas fa-chart-line"></i></a>
        </div>
    </div>
</div>

<!-- Main Content -->
<div class="container">
    <!-- Stats Section -->
    <section class="section">
        <div class="section-header">
            <h2>Why Choose Our AI Solution?</h2>
            <p>Trusted by 500+ electronics retailers worldwide to optimize their inventory management</p>
        </div>
        
        <div class="stats-grid">
            <div class="stat-card" style="background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);">
                <div class="stat-number">98%</div>
                <div class="stat-label">Accuracy in Demand Forecasting</div>
            </div>
            <div class="stat-card" style="background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);">
                <div class="stat-number">35%</div>
                <div class="stat-label">Average Profit Increase</div>
            </div>
            <div class="stat-card" style="background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);">
                <div class="stat-number">50%</div>
                <div class="stat-label">Reduction in Excess Stock</div>
            </div>
        </div>
    </section>

    <!-- Features Section -->
    <section class="section">
        <div class="section-header">
            <h2>Powerful Features for Electronics Retailers</h2>
            <p>Our AI specializes in mobile phones, laptops, and accessories inventory optimization</p>
        </div>
        
        <div class="features-grid">
            <div class="feature-card" style="background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);">
                <div class="feature-icon"><i class="fas fa-mobile-alt"></i></div>
                <h3>Model-Specific Insights</h3>
                <p>Get detailed analytics on each phone and laptop model's performance, popularity, and ideal stock levels.</p>
            </div>
            
            <div class="feature-card" style="background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);">
                <div class="feature-icon"><i class="fas fa-robot"></i></div>
                <h3>AI Recommendations</h3>
                <p>Receive automated purchase suggestions based on real-time market trends and your sales history.</p>
            </div>
            
            <div class="feature-card" style="background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);">
                <div class="feature-icon"><i class="fas fa-chart-pie"></i></div>
                <h3>Brand Analytics</h3>
                <p>Compare performance across brands like Apple, Samsung, Dell to optimize your product mix.</p>
            </div>
        </div>
    </section>

    <!-- Products Section -->
    <section class="section">
        <div class="section-header">
            <h2>We Optimize All Your Electronics Inventory</h2>
            <p>From flagship smartphones to budget laptops and accessories</p>
        </div>
        
        <div class="products-showcase">
            <div class="product-card">
                <div class="product-image" style="background-image: url('https://images.unsplash.com/photo-1598327105666-5b89351aff97?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2127&q=80');"></div>
                <div class="product-info">
                    <h4>Premium Smartphones</h4>
                    <p>Latest models from Apple, Samsung, Google</p>
                    <div class="product-price">$699-$1499</div>
                </div>
            </div>
            
            <div class="product-card">
                <div class="product-image" style="background-image: url('https://images.unsplash.com/photo-1496181133206-80ce9b88a853?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2071&q=80');"></div>
                <div class="product-info">
                    <h4>High-Performance Laptops</h4>
                    <p>Business and gaming laptops from top brands</p>
                    <div class="product-price">$899-$2499</div>
                </div>
            </div>
            
            <div class="product-card">
                <div class="product-image" style="background-image: url('https://images.unsplash.com/photo-1600003263720-95b45a4035d5?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80');"></div>
                <div class="product-info">
                    <h4>Accessories Bundle</h4>
                    <p>Cases, chargers, headphones and more</p>
                    <div class="product-price">$19-$199</div>
                </div>
            </div>
        </div>
    </section>

    <!-- Testimonials -->
    <section class="testimonials">
        <div class="section-header" style="color: white;">
            <h2>What Our Clients Say</h2>
            <p>Trusted by electronics retailers across the globe</p>
        </div>
        
        <div class="testimonial-grid">
            <div class="testimonial-card">
                <div class="testimonial-text">
                    "This AI system reduced our excess inventory by 60% while increasing sales of high-margin items. A game-changer for our mobile business!"
                </div>
                <div class="testimonial-author">
                    <div class="author-avatar" style="background-image: url('https://randomuser.me/api/portraits/men/32.jpg');"></div>
                    <div class="author-info">
                        <h5>Rajesh Kumar</h5>
                        <p>MobileLand, Delhi</p>
                    </div>
                </div>
            </div>
            
            <div class="testimonial-card">
                <div class="testimonial-text">
                    "The laptop demand forecasting is incredibly accurate. We've optimized our stock levels across 12 stores with this system."
                </div>
                <div class="testimonial-author">
                    <div class="author-avatar" style="background-image: url('https://randomuser.me/api/portraits/women/44.jpg');"></div>
                    <div class="author-info">
                        <h5>Priya Patel</h5>
                        <p>TechWorld, Mumbai</p>
                    </div>
                </div>
            </div>
            
            <div class="testimonial-card">
                <div class="testimonial-text">
                    "Since implementing this AI, we've seen a 40% increase in accessory sales through smart bundling recommendations."
                </div>
                <div class="testimonial-author">
                    <div class="author-avatar" style="background-image: url('https://randomuser.me/api/portraits/men/67.jpg');"></div>
                    <div class="author-info">
                        <h5>Arjun Singh</h5>
                        <p>GadgetZone, Bangalore</p>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>

<!-- Footer -->
<footer>
    <div class="footer-content">
        <div class="footer-section">
            <img src="https://via.placeholder.com/150x50?text=AI+Inventory+Pro" alt="AI Inventory Pro Logo" class="footer-logo">
            <div class="footer-about">
                <p>The leading AI inventory optimization platform for mobile and laptop retailers worldwide.</p>
            </div>
            <div class="social-links">
                <a href="#"><i class="fab fa-facebook-f"></i></a>
                <a href="#"><i class="fab fa-twitter"></i></a>
                <a href="#"><i class="fab fa-instagram"></i></a>
                <a href="#"><i class="fab fa-linkedin-in"></i></a>
            </div>
        </div>
        
        <div class="footer-section">
            <div class="footer-links">
                <h3>Quick Links</h3>
                <ul>
                    <li><a href="/"><i class="fas fa-chevron-right"></i> Home</a></li>
                    <li><a href="/model"><i class="fas fa-chevron-right"></i> Recommendations</a></li>
                    <li><a href="/analytics"><i class="fas fa-chevron-right"></i> Analytics</a></li>
                    <li><a href="#"><i class="fas fa-chevron-right"></i> Case Studies</a></li>
                    <li><a href="#"><i class="fas fa-chevron-right"></i> Pricing</a></li>
                </ul>
            </div>
        </div>
        
        <div class="footer-section">
            <div class="footer-links">
                <h3>Products</h3>
                <ul>
                    <li><a href="#"><i class="fas fa-chevron-right"></i> For Mobile Shops</a></li>
                    <li><a href="#"><i class="fas fa-chevron-right"></i> For Laptop Retailers</a></li>
                    <li><a href="#"><i class="fas fa-chevron-right"></i> For Electronics Chains</a></li>
                    <li><a href="#"><i class="fas fa-chevron-right"></i> Accessory Optimization</a></li>
                </ul>
            </div>
        </div>
        
        <div class="footer-section">
            <div class="footer-links">
                <h3>Contact Us</h3>
                <ul>
                    <li><a href="#"><i class="fas fa-phone-alt"></i> +1 (555) 123-4567</a></li>
                    <li><a href="#"><i class="fas fa-envelope"></i> support@aiinventorypro.com</a></li>
                    <li><a href="#"><i class="fas fa-map-marker-alt"></i> Tech Park, Bangalore, India</a></li>
                </ul>
            </div>
        </div>
    </div>
    
    <div class="copyright">
        <p>&copy; 2023 AI Inventory Pro. All rights reserved. | <a href="#" style="color: var(--accent);">Privacy Policy</a> | <a href="#" style="color: var(--accent);">Terms of Service</a></p>
    </div>
</footer>

<script>
    // Create floating tech icons dynamically
    document.addEventListener('DOMContentLoaded', function() {
        const floaters = document.querySelector('.tech-floaters');
        const icons = ['📱', '💻', '⌚', '🔌', '🎧', '🖥️', '🔋', '📲'];
        
        for (let i = 0; i < 8; i++) {
            const icon = document.createElement('div');
            icon.className = 'tech-icon';
            icon.innerHTML = icons[Math.floor(Math.random() * icons.length)];
            icon.style.top = `${Math.random() * 80 + 10}%`;
            icon.style.left = `${Math.random() * 80 + 10}%`;
            icon.style.fontSize = `${Math.random() * 2 + 2}rem`;
            icon.style.animationDelay = `${Math.random() * 8}s`;
            floaters.appendChild(icon);
        }
    });
</script>
{% endblock %}

----- File: D:\ML Folders\ml_env\GitHub\Hero-Product-Recommendation\templates\index.html -----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inventory Dashboard</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
    <style>
        .home-button {
            display: inline-block;
            padding: 10px 20px;
            background-color: #3498db;
            color: white;
            text-decoration: none;
            border-radius: 4px;
            margin-bottom: 20px;
            transition: background-color 0.3s;
        }
        .home-button:hover {
            background-color: #2980b9;
        }
    </style>
</head>
<body>
    <div class="container">
        <a href="/" class="home-button">← Back to Home</a>
        // ... rest of the existing code ... 

----- File: D:\ML Folders\ml_env\GitHub\Hero-Product-Recommendation\templates\inventory.html -----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inventory Management - Hero Inventory</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #6C5CE7;
            --primary-dark: #5649BE;
            --accent: #FD79A8;
            --accent-dark: #E84393;
            --success: #00B894;
            --warning: #FDCB6E;
            --dark: #2D3436;
            --light: #F5F6FA;
            --gradient-primary: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
            --gradient-accent: linear-gradient(135deg, var(--accent) 0%, var(--accent-dark) 100%);
            --gradient-success: linear-gradient(135deg, var(--success) 0%, #00a884 100%);
            --gradient-warning: linear-gradient(135deg, var(--warning) 0%, #f39c12 100%);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', -apple-system, BlinkMacSystemFont, sans-serif;
        }

        body {
            background-color: transparent;
            color: var(--dark);
            line-height: 1.7;
            overflow-x: hidden;
            background-image: url('https://images.unsplash.com/photo-1550009158-9ebf69173e03?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2101&q=80');
            background-size: cover;
            background-attachment: fixed;
            background-position: center;
            background-blend-mode: normal;
            min-height: 100vh;
            position: relative;
        }

        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: radial-gradient(circle at 20% 50%, rgba(108, 92, 231, 0.15) 0%, transparent 50%);
            pointer-events: none;
            z-index: 0;
        }

        .container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
            margin-top: 2rem;
            margin-bottom: 2rem;
            padding: 2rem;
            position: relative;
            z-index: 1;
            animation: fadeInUp 0.6s ease-out;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .nav-tabs {
            border: none;
            margin-bottom: 1.5rem;
            position: relative;
            z-index: 2;
        }

        .nav-tabs .nav-link {
            border: none;
            padding: 1rem 1.5rem;
            margin-right: 0.5rem;
            border-radius: 12px;
            background: rgba(255, 255, 255, 0.7);
            color: var(--dark);
            font-weight: 500;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .nav-tabs .nav-link::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            transition: 0.5s;
        }

        .nav-tabs .nav-link:hover::before {
            left: 100%;
        }

        .nav-tabs .nav-link.active {
            background: var(--gradient-primary);
            color: white;
            font-weight: 600;
            box-shadow: 0 4px 15px rgba(108, 92, 231, 0.3);
            transform: translateY(-2px);
        }

        .card {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 15px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
            transition: all 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }

        .card-header {
            background: rgba(255, 255, 255, 0.8);
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 15px 15px 0 0 !important;
            padding: 1.25rem;
        }

        .form-control, .form-select {
            background: rgba(255, 255, 255, 0.9);
            border: 1px solid rgba(0, 0, 0, 0.1);
            border-radius: 10px;
            padding: 0.75rem 1rem;
            transition: all 0.3s ease;
        }

        .form-control:focus, .form-select:focus {
            background: rgba(255, 255, 255, 0.95);
            box-shadow: 0 0 0 0.25rem rgba(108, 92, 231, 0.15);
            border-color: var(--primary);
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border-radius: 10px;
            font-weight: 500;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            backdrop-filter: blur(5px);
        }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            transition: 0.5s;
        }

        .btn:hover::before {
            left: 100%;
        }

        .btn-primary {
            background: var(--gradient-primary);
            border: none;
            box-shadow: 0 4px 15px rgba(108, 92, 231, 0.3);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(108, 92, 231, 0.4);
        }

        .btn-secondary {
            background: rgba(108, 92, 231, 0.1);
            color: var(--primary);
            border: none;
        }

        .btn-secondary:hover {
            background: rgba(108, 92, 231, 0.2);
            transform: translateY(-2px);
        }

        .btn-success {
            background: var(--gradient-success);
            border: none;
            box-shadow: 0 4px 15px rgba(0, 184, 148, 0.3);
        }

        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 184, 148, 0.4);
        }

        .btn-danger {
            background: var(--gradient-accent);
            border: none;
            box-shadow: 0 4px 15px rgba(253, 121, 168, 0.3);
        }

        .btn-danger:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(253, 121, 168, 0.4);
        }

        .table {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            overflow: hidden;
        }

        .table thead th {
            background: rgba(108, 92, 231, 0.1);
            color: var(--primary);
            font-weight: 600;
            border: none;
            padding: 1rem;
        }

        .table tbody td {
            padding: 1rem;
            border-color: rgba(0, 0, 0, 0.05);
            vertical-align: middle;
        }

        .table tbody tr {
            transition: all 0.3s ease;
        }

        .table tbody tr:hover {
            background: rgba(108, 92, 231, 0.05);
        }

        .product-card {
            border: none;
            border-radius: 15px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
        }

        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }

        .stock-status {
            padding: 0.5rem 1rem;
            border-radius: 8px;
            font-size: 0.9em;
            font-weight: 500;
            display: inline-block;
            margin-top: 0.5rem;
        }

        .stock-low {
            background: var(--gradient-warning);
            color: white;
        }

        .stock-ok {
            background: var(--gradient-success);
            color: white;
        }

        .stock-out {
            background: var(--gradient-accent);
            color: white;
        }

        /* Animations */
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes float {
            0% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
            100% { transform: translateY(0); }
        }

        /* Loading Animation */
        .loading-spinner {
            width: 40px;
            height: 40px;
            border: 4px solid rgba(108, 92, 231, 0.1);
            border-left-color: var(--primary);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 2rem auto;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .container {
                margin-top: 1rem;
                margin-bottom: 1rem;
                padding: 1rem;
            }

            .nav-tabs .nav-link {
                padding: 0.75rem 1rem;
                font-size: 0.9rem;
            }

            .card {
                margin-bottom: 1rem;
            }

            .btn {
                padding: 0.5rem 1rem;
                font-size: 0.9rem;
            }
        }

        /* Custom Scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        ::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb {
            background: var(--primary);
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: var(--primary-dark);
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <a href="/" class="btn btn-secondary mb-3"><i class="fas fa-arrow-left"></i> Back to Home</a>
        <ul class="nav nav-tabs" id="inventoryTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="sell-tab" data-bs-toggle="tab" data-bs-target="#sell" type="button">
                    <i class="fas fa-shopping-cart"></i> Sell Products
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="restock-tab" data-bs-toggle="tab" data-bs-target="#restock" type="button">
                    <i class="fas fa-boxes"></i> Restock Inventory
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="products-tab" data-bs-toggle="tab" data-bs-target="#products" type="button">
                    <i class="fas fa-list"></i> View Products
                </button>
            </li>
        </ul>

        {% if session.get('is_admin') %}
        <div class="mt-3 mb-3">
            <a href="{{ url_for('load_dataset') }}" class="btn btn-warning">
                <i class="fas fa-database"></i> Load Inventory Dataset
            </a>
        </div>
        {% endif %}

        <div class="tab-content mt-4" id="inventoryTabContent">
            <!-- Sell Products Tab -->
            <div class="tab-pane fade show active" id="sell" role="tabpanel">
                <div class="row">
                    <div class="col-md-8">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="card-title mb-0">New Sale</h5>
                            </div>
                            <div class="card-body">
                                <form id="saleForm">
                                    <div class="row mb-3">
                                        <div class="col-md-6">
                                            <label class="form-label">Customer Name</label>
                                            <input type="text" class="form-control" name="customer_name" required>
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label">Phone Number</label>
                                            <input type="tel" class="form-control" name="phone" required>
                                        </div>
                                    </div>
                                    
                                    <div class="form-group">
                                        <label for="productSelectSell">Product:</label>
                                        <div class="input-group">
                                            <input type="text" class="form-control" id="productSearchSell" placeholder="Search or enter product name...">
                                            <select class="form-control" id="productSelectSell" style="display: none;">
                                                <option value="">Select a product</option>
                                            </select>
                                        </div>
                                    </div>
                                    
                                    <div id="productList">
                                        <div class="product-item mb-3">
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <label class="form-label">Quantity</label>
                                                    <input type="number" class="form-control" name="quantities[]" min="1" required>
                                                </div>
                                                <div class="col-md-3">
                                                    <label class="form-label">&nbsp;</label>
                                                    <button type="button" class="btn btn-danger d-block w-100 remove-product">
                                                        <i class="fas fa-trash"></i> Remove
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <button type="button" class="btn btn-secondary mb-3" id="addProduct">
                                        <i class="fas fa-plus"></i> Add Product
                                    </button>

                                    <div class="row mb-3">
                                        <div class="col-md-6">
                                            <label class="form-label">Payment Method</label>
                                            <select class="form-select" name="payment_method" required>
                                                <option value="cash">Cash</option>
                                                <option value="card">Card</option>
                                                <option value="upi">UPI</option>
                                            </select>
                                        </div>
                                    </div>

                                    <div class="card mb-3">
                                        <div class="card-body">
                                            <h6>Order Summary</h6>
                                            <div id="orderSummary">
                                                <!-- Will be populated by JavaScript -->
                                            </div>
                                        </div>
                                    </div>

                                    <button type="submit" class="btn btn-primary">
                                        <i class="fas fa-check"></i> Complete Sale
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Restock Inventory Tab -->
            <div class="tab-pane fade" id="restock" role="tabpanel">
                <div class="row">
                    <div class="col-md-8">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="card-title mb-0">Add/Restock Product</h5>
                            </div>
                            <div class="card-body">
                                <form id="restockForm">
                                    <div class="row mb-3">
                                        <div class="col-md-6">
                                            <label class="form-label">Product Name</label>
                                            <input type="text" class="form-control" name="product_name" required>
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label">Brand Name</label>
                                            <input type="text" class="form-control" name="brand_name" required>
                                        </div>
                                    </div>

                                    <div class="row mb-3">
                                        <div class="col-md-6">
                                            <label class="form-label">Category</label>
                                            <input type="text" class="form-control" name="category" required>
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label">Subcategory</label>
                                            <input type="text" class="form-control" name="subcategory" required>
                                        </div>
                                    </div>

                                    <div class="row mb-3">
                                        <div class="col-md-4">
                                            <label class="form-label">Unit Price</label>
                                            <input type="number" class="form-control" name="unit_price" step="0.01" required>
                                        </div>
                                        <div class="col-md-4">
                                            <label class="form-label">Cost Price</label>
                                            <input type="number" class="form-control" name="cost_price" step="0.01" required>
                                        </div>
                                        <div class="col-md-4">
                                            <label class="form-label">GST (%)</label>
                                            <input type="number" class="form-control" name="gst_percentage" step="0.01" required>
                                        </div>
                                    </div>

                                    <div class="row mb-3">
                                        <div class="col-md-4">
                                            <label class="form-label">Current Stock</label>
                                            <input type="number" class="form-control" name="current_stock" required>
                                        </div>
                                        <div class="col-md-4">
                                            <label class="form-label">Reorder Level</label>
                                            <input type="number" class="form-control" name="reorder_level" required>
                                        </div>
                                        <div class="col-md-4">
                                            <label class="form-label">Reorder Quantity</label>
                                            <input type="number" class="form-control" name="reorder_quantity" required>
                                        </div>
                                    </div>

                                    <div class="row mb-3">
                                        <div class="col-md-6">
                                            <label class="form-label">Supplier Name</label>
                                            <input type="text" class="form-control" name="supplier_name" required>
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label">Lead Time (days)</label>
                                            <input type="number" class="form-control" name="lead_time" required>
                                        </div>
                                    </div>

                                    <button type="submit" class="btn btn-primary">
                                        <i class="fas fa-save"></i> Save Product
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- View Products Tab -->
            <div class="tab-pane fade" id="products" role="tabpanel">
                <div class="row mb-3">
                    <div class="col-md-4">
                        <input type="text" class="form-control" id="productSearchView" placeholder="Search products...">
                    </div>
                    <div class="col-md-3">
                        <select class="form-select" id="categoryFilter">
                            <option value="">All Categories</option>
                            <option value="Mobiles">Mobiles</option>
                            <option value="Laptops">Laptops</option>
                            <option value="Mobile Accessories">Mobile Accessories</option>
                            <option value="Laptop Accessories">Laptop Accessories</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <select class="form-select" id="stockFilter">
                            <option value="">All Stock Status</option>
                            <option value="low">Low Stock</option>
                            <option value="ok">In Stock</option>
                            <option value="out">Out of Stock</option>
                        </select>
                    </div>
                    <div class="col-md-2 d-flex gap-2">
                        <button class="btn btn-info w-100" id="viewSoldProducts">
                            <i class="fas fa-receipt"></i> Sold Product Data
                        </button>
                    </div>
                </div>
                <div id="productGrid" class="row">
                    <!-- Products will be populated here -->
                </div>
                <div id="soldProductSection" style="display:none;">
                    <div class="mb-3">
                        <button class="btn btn-secondary" id="backToProducts"><i class="fas fa-arrow-left"></i> Back to Products</button>
                    </div>
                    <div class="table-responsive">
                        <table class="table table-bordered table-striped">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Product Name</th>
                                    <th>Brand</th>
                                    <th>Category</th>
                                    <th>Quantity Sold</th>
                                    <th>Payment Method</th>
                                    <th>Total Revenue</th>
                                </tr>
                            </thead>
                            <tbody id="soldProductTableBody">
                                <!-- Sold product data will be populated here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="{{ url_for('static', filename='js/inventory.js') }}"></script>
    <script>
    // Sell tab product search logic
    function setupSellProductSearch() {
        const productSearch = document.getElementById('productSearchSell');
        const productSelect = document.getElementById('productSelectSell');
        loadProductsSell();
        productSearch.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            const options = productSelect.options;
            for (let i = 0; i < options.length; i++) {
                const option = options[i];
                const text = option.text.toLowerCase();
                option.style.display = text.includes(searchTerm) ? '' : 'none';
            }
            if (!Array.from(options).some(opt => opt.text.toLowerCase() === searchTerm)) {
                productSearch.setCustomValidity('');
            }
        });
        productSelect.addEventListener('change', function() {
            if (this.value) {
                productSearch.value = this.options[this.selectedIndex].text;
            }
        });
    }
    async function loadProductsSell() {
        try {
            const response = await fetch('/api/products');
            const products = await response.json();
            const productSelect = document.getElementById('productSelectSell');
            productSelect.innerHTML = '<option value="">Select a product</option>';
            products.forEach(product => {
                const option = document.createElement('option');
                option.value = product.id;
                option.text = `${product.name} (${product.brand}) - ₹${product.unit_price}`;
                productSelect.appendChild(option);
            });
        } catch (error) {
            console.error('Error loading products:', error);
        }
    }
    // View tab product grid logic
    function setupViewProductGrid() {
        document.getElementById('productSearchView').addEventListener('input', loadProductGrid);
        document.getElementById('categoryFilter').addEventListener('change', loadProductGrid);
        document.getElementById('stockFilter').addEventListener('change', loadProductGrid);
        document.getElementById('viewSoldProducts').addEventListener('click', function() {
            document.getElementById('productGrid').style.display = 'none';
            document.getElementById('soldProductSection').style.display = '';
            loadSoldProductData();
        });
        document.getElementById('backToProducts').addEventListener('click', function() {
            document.getElementById('soldProductSection').style.display = 'none';
            document.getElementById('productGrid').style.display = '';
        });
    }
    async function loadProductGrid() {
        try {
            const searchQuery = document.getElementById('productSearchView').value;
            const category = document.getElementById('categoryFilter').value;
            const stockStatus = document.getElementById('stockFilter').value;
            // Use correct query param 'q' for search
            const params = new URLSearchParams();
            if (searchQuery) params.append('q', searchQuery);
            if (category) params.append('category', category);
            if (stockStatus) params.append('stock_status', stockStatus);
            const response = await fetch(`/api/products/search?${params.toString()}`);
            const products = await response.json();
            const productGrid = document.getElementById('productGrid');
            productGrid.innerHTML = '';
            if (products.length === 0) {
                productGrid.innerHTML = '<div class="col-12 text-center"><p>No products found</p></div>';
                return;
            }
            products.forEach(product => {
                const stockStatusClass = getStockStatusClass(product.stock_status);
                const stockStatusText = getStockStatusText(product.stock_status);
                const productCard = `
                    <div class="col-md-4 mb-4">
                        <div class="card product-card">
                            <div class="card-body">
                                <h5 class="card-title">${product.name}</h5>
                                <h6 class="card-subtitle mb-2 text-muted">${product.brand}</h6>
                                <p class="card-text">
                                    <strong>Category:</strong> ${product.category}<br>
                                    <strong>Price:</strong> ₹${product.unit_price}<br>
                                    <strong>Stock:</strong> ${product.current_stock} units<br>
                                    <span class="stock-status ${stockStatusClass}">${stockStatusText}</span>
                                </p>
                                <div class="d-flex justify-content-between">
                                    <button class="btn btn-sm btn-primary" onclick="editProduct(${product.id})">
                                        <i class="fas fa-edit"></i> Edit
                                    </button>
                                    <button class="btn btn-sm btn-success" onclick="restockProduct(${product.id})">
                                        <i class="fas fa-boxes"></i> Restock
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                productGrid.innerHTML += productCard;
            });
        } catch (error) {
            console.error('Error loading products:', error);
            document.getElementById('productGrid').innerHTML = 
                '<div class="col-12 text-center"><p class="text-danger">Error loading products. Please try again.</p></div>';
        }
    }
    async function loadSoldProductData() {
        try {
            const response = await fetch('/api/sold_products');
            const soldProducts = await response.json();
            const tbody = document.getElementById('soldProductTableBody');
            tbody.innerHTML = '';
            if (soldProducts.length === 0) {
                tbody.innerHTML = '<tr><td colspan="7" class="text-center">No sold product data found</td></tr>';
                return;
            }
            soldProducts.forEach(item => {
                const row = `<tr>
                    <td>${new Date(item.date).toLocaleDateString()}</td>
                    <td>${item.product_name}</td>
                    <td>${item.brand}</td>
                    <td>${item.category}</td>
                    <td>${item.units_sold}</td>
                    <td>${item.payment_method}</td>
                    <td>₹${item.total_revenue_incl_gst}</td>
                </tr>`;
                tbody.innerHTML += row;
            });
        } catch (error) {
            document.getElementById('soldProductTableBody').innerHTML = '<tr><td colspan="7" class="text-danger text-center">Error loading sold product data</td></tr>';
        }
    }
    // On DOMContentLoaded, setup both tabs
    addEventListener('DOMContentLoaded', function() {
        setupSellProductSearch();
        setupViewProductGrid();
        // Attach AJAX handler to sale form
        const saleForm = document.getElementById('saleForm');
        if (saleForm) {
            saleForm.addEventListener('submit', async function(event) {
                event.preventDefault();
                // Collect form data (customize as needed for your form structure)
                const customerName = saleForm.querySelector('[name="customer_name"]').value;
                const phone = saleForm.querySelector('[name="phone"]').value;
                const paymentMethod = saleForm.querySelector('[name="payment_method"]').value;
                // For demo: assume one product per sale (expand for multiple if needed)
                const productName = document.getElementById('productSearchSell').value;
                const quantity = saleForm.querySelector('[name="quantities[]"]').value;
                // You may need to map productName to productId if using IDs
                // For now, try to find the product by name from the loaded list
                let productId = null;
                const responseProducts = await fetch('/api/products');
                const products = await responseProducts.json();
                for (const p of products) {
                    if (p.name === productName) {
                        productId = p.id;
                        break;
                    }
                }
                if (!productId) {
                    alert('Product not found. Please select a valid product.');
                    return;
                }
                // Prepare sale data
                const saleData = {
                    items: [{ product_id: productId, quantity: parseInt(quantity) }],
                    customer_type: 'regular', // or get from form if available
                    payment_method: paymentMethod
                };
                // Submit sale
                const saleResp = await fetch('/api/sales', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(saleData)
                });
                const saleResult = await saleResp.json();
                if (saleResp.ok) {
                    alert('Sale completed successfully!');
                    saleForm.reset();
                    // If Sold Product Data table is visible, refresh it
                    if (document.getElementById('soldProductSection').style.display !== 'none') {
                        loadSoldProductData();
                    }
                } else {
                    alert('Error: ' + (saleResult.error || 'Sale failed.'));
                }
            });
        }
    });

    function getStockStatusClass(status) {
        switch(status.toLowerCase()) {
            case 'low':
                return 'stock-low';
            case 'ok':
                return 'stock-ok';
            case 'out':
                return 'stock-out';
            default:
                return '';
        }
    }

    function getStockStatusText(status) {
        switch(status.toLowerCase()) {
            case 'low':
                return 'Low Stock';
            case 'ok':
                return 'In Stock';
            case 'out':
                return 'Out of Stock';
            default:
                return status;
        }
    }

    function editProduct(productId) {
        // Switch to restock tab and populate form
        document.getElementById('restock-tab').click();
        // TODO: Populate the restock form with product details
    }

    function restockProduct(productId) {
        // Switch to restock tab
        document.getElementById('restock-tab').click();
        // TODO: Populate the restock form with product details
    }
    </script>
</body>
</html> 

----- File: D:\ML Folders\ml_env\GitHub\Hero-Product-Recommendation\templates\login.html -----
{% extends "base.html" %}

{% block title %}Login{% endblock %}

{% block extra_css %}
<style>
    .auth-container {
        max-width: 100%;
        width: 360px;
        margin: 60px auto;
        padding: 25px 20px;
        background-color: rgba(255, 255, 255, 0.95);
        border-radius: 12px;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
        backdrop-filter: blur(10px); /* blur only inside auth-container */
    }

    .auth-title {
        text-align: center;
        color: #2c3e50;
        font-size: 24px;
        margin-bottom: 25px;
        font-weight: 600;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-group label {
        display: block;
        margin-bottom: 6px;
        color: #2c3e50;
        font-size: 14px;
    }

    .form-group input {
        width: 100%;
        padding: 12px;
        border: 1px solid #ccc;
        border-radius: 6px;
        font-size: 15px;
        box-sizing: border-box;
    }

    .auth-button {
        width: 100%;
        padding: 12px;
        background-color: #3498db;
        color: white;
        border: none;
        border-radius: 6px;
        font-size: 16px;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .auth-button:hover {
        background-color: #2980b9;
    }

    .auth-links {
        text-align: center;
        margin-top: 20px;
        font-size: 14px;
    }

    .auth-links a {
        color: #3498db;
        text-decoration: none;
        font-weight: 500;
    }

    .auth-links a:hover {
        text-decoration: underline;
    }

    .flash-messages {
        margin-bottom: 15px;
    }

    .alert {
        padding: 10px 15px;
        border-radius: 6px;
        font-size: 14px;
        margin-bottom: 12px;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    @media (max-width: 480px) {
        .auth-container {
            width: 90%;
            padding: 20px 15px;
        }
    }
</style>


{% endblock %}

{% block content %}
<div class="auth-container">
    <h2 class="auth-title">Login</h2>
    
    <div class="flash-messages">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ category }}">{{ message }}</div>
                {% endfor %}
            {% endif %}
        {% endwith %}
    </div>

    <form method="POST" action="{{ url_for('login') }}">
        <div class="form-group">
            <label for="username">Username</label>
            <input type="text" id="username" name="username" required>
        </div>
        
        <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required>
        </div>
        
        <button type="submit" class="auth-button">Login</button>
    </form>
    
    <div class="auth-links">
        <p>Don't have an account? <a href="{{ url_for('signup') }}">Sign up</a></p>
    </div>
</div>
{% endblock %} 

----- File: D:\ML Folders\ml_env\GitHub\Hero-Product-Recommendation\templates\model.html -----
{% extends "base.html" %}

{% block title %}Product Recommendation Model{% endblock %}

{% block extra_css %}
<style>
    .recommendations-section {
        margin-bottom: 40px;
    }
    
    .category-title {
        color: #1a1a1a;
        margin: 30px 0 20px;
        padding-bottom: 10px;
        border-bottom: 2px solid #3498db;
        text-shadow: 0 2px 8px rgba(44,62,80,0.08);
    }
    
    table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 80px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        background: rgba(255,255,255,0.92);
        color: #1a1a1a;
    }
    
    th, td {
        padding: 12px 15px;
        text-align: left;
        border-bottom: 1px solid #ddd;
        color: #1a1a1a;
    }
    
    th {
        background-color: #3498db;
        color: #fff;
        font-weight: bold;
        text-shadow: 0 1px 2px rgba(44,62,80,0.12);
    }
    
    tr:hover {
        background-color: #f0f4fa;
    }
    
    .score-cell {
        font-weight: bold;
        color: #1a1a1a;
    }
    
    .stock-ok {
        color: #27ae60;
    }
    
    .stock-low {
        color: #e74c3c;
    }
    
    .bcg-section {
        margin-top: 40px;
        padding-top: 20px;
        border-top: 2px solid #eee;
    }

    .bcg-matrix {
        display: grid;
        grid-template-columns: 1fr 1fr;
        grid-template-rows: 1fr 1fr;
        gap: 20px;
        margin-top: 30px;
    }

    .bcg-quadrant {
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        background: rgba(255,255,255,0.92);
        color: #1a1a1a;
    }

    .stars-quadrant {
        grid-column: 1;
        grid-row: 1;
        background-color: rgba(241, 196, 15, 0.1);
        border: 2px solid #f1c40f;
    }

    .cows-quadrant {
        grid-column: 2;
        grid-row: 1;
        background-color: rgba(46, 204, 113, 0.1);
        border: 2px solid #2ecc71;
    }

    .question-marks-quadrant {
        grid-column: 1;
        grid-row: 2;
        background-color: rgba(52, 152, 219, 0.1);
        border: 2px solid #3498db;
    }

    .dogs-quadrant {
        grid-column: 2;
        grid-row: 2;
        background-color: rgba(231, 76, 60, 0.1);
        border: 2px solid #e74c3c;
    }

    .quadrant-title {
        font-size: 1.2em;
        font-weight: bold;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid;
        text-shadow: 0 1px 2px rgba(44,62,80,0.10);
    }

    .stars-title {
        color: #f1c40f;
        border-bottom-color: #f1c40f;
    }

    .cows-title {
        color: #2ecc71;
        border-bottom-color: #2ecc71;
    }

    .question-marks-title {
        color: #3498db;
        border-bottom-color: #3498db;
    }

    .dogs-title {
        color: #e74c3c;
        border-bottom-color: #e74c3c;
    }

    .bcg-product {
        background-color: rgba(255,255,255,0.97);
        color: #222;
        padding: 15px;
        margin-bottom: 10px;
        border-radius: 4px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.08);
    }

    .bcg-metrics {
        display: flex;
        gap: 15px;
        margin-top: 10px;
        font-size: 0.9em;
        color: #222;
    }

    .bcg-metric {
        background-color: #f8f9fa;
        color: #222;
        padding: 5px 10px;
        border-radius: 4px;
    }

    .top-rated-section {
        margin-bottom: 40px;
        padding: 20px;
        background-color: rgba(255,255,255,0.92);
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        color: #1a1a1a;
    }
    
    .top-rated-title {
        color: #1a1a1a;
        margin-bottom: 20px;
        padding-bottom: 10px;
        border-bottom: 2px solid #3498db;
        text-shadow: 0 2px 8px rgba(44,62,80,0.08);
    }
    
    .top-rated-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
    }
    
    .top-rated-card {
        background-color: rgba(255,255,255,0.97);
        color: #222;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    
    .top-rated-card h3 {
        color: #1a1a1a;
        margin-bottom: 10px;
        text-shadow: 0 1px 2px rgba(44,62,80,0.10);
    }
    
    .top-rated-card .brand {
        color: #444;
        font-size: 0.9em;
        margin-bottom: 10px;
    }
    
    .top-rated-card .rating {
        color: #f39c12;
        font-weight: bold;
        margin-bottom: 10px;
    }
    
    .top-rated-card .reviews {
        color: #444;
        font-size: 0.9em;
        margin-bottom: 10px;
    }
    
    .top-rated-card .price {
        color: #27ae60;
        font-weight: bold;
        font-size: 1.2em;
    }
</style>
{% endblock %}

{% block content %}
<div class="top-rated-section">
    <h2 class="top-rated-title">🌟 Top Rated Products</h2>
    <div class="top-rated-grid">
        {% for product in top_rated %}
        <div class="top-rated-card">
            <h3>{{ product.product_name }}</h3>
            <div class="brand">Brand: {{ product.brand }}</div>
            <div class="rating">Rating: {{ "%.1f"|format(product.rating) }} ⭐</div>
            <div class="reviews">Reviews: {{ product.reviews }}</div>
            <div class="price">Price: ₹{{ "%.2f"|format(product.price) }}</div>
        </div>
        {% endfor %}
    </div>
</div>

<h1>Automated Product Recommendations</h1>

{% for category, products in recommendations.items() %}
<div class="recommendations-section">
    <h2 class="category-title">{{ category }}</h2>
    <table>
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Brand</th>
                <th>Price (₹)</th>
                <th>Rating</th>
                <th>Stock Status</th>
                <th>Current Stock</th>
                <th>Total Revenue</th>
                <th>Score</th>
            </tr>
        </thead>
        <tbody>
            {% for product in products %}
            <tr>
                <td>{{ product.product_name }}</td>
                <td>{{ product.brand }}</td>
                <td>{{ "%.2f"|format(product.price) }}</td>
                <td>{{ "%.1f"|format(product.rating) }}</td>
                <td class="stock-{{ product.stock_status|lower }}">{{ product.stock_status }}</td>
                <td>{{ product.current_stock }}</td>
                <td>{{ "%.2f"|format(product.total_revenue) }}</td>
                <td class="score-cell">{{ "%.2f"|format(product.score) }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</div>
{% endfor %}

<div class="bcg-section">
    <h2 class="category-title">BCG Matrix Analysis</h2>
    
    <div class="bcg-matrix">
        <div class="bcg-quadrant cows-quadrant">
            <h3 class="quadrant-title cows-title">🐄 Cash Cows</h3>
            {% for product in bcg_recommendations.cows %}
            <div class="bcg-product">
                <div class="product-name">{{ product.product_name }}</div>
                <div class="product-brand">{{ product.brand }}</div>
                <div class="bcg-metrics">
                    <div class="bcg-metric">Price: ₹{{ "%.2f"|format(product.price) }}</div>
                    <div class="bcg-metric">Sales: ₹{{ "%.2f"|format(product.sales) }}</div>
                    <div class="bcg-metric">Profit: ₹{{ "%.2f"|format(product.profit) }}</div>
                </div>
            </div>
            {% endfor %}
        </div>

        <div class="bcg-quadrant stars-quadrant">
            <h3 class="quadrant-title stars-title">⭐ Stars</h3>
            {% for product in bcg_recommendations.stars %}
            <div class="bcg-product">
                <div class="product-name">{{ product.product_name }}</div>
                <div class="product-brand">{{ product.brand }}</div>
                <div class="bcg-metrics">
                    <div class="bcg-metric">Price: ₹{{ "%.2f"|format(product.price) }}</div>
                    <div class="bcg-metric">Sales: ₹{{ "%.2f"|format(product.sales) }}</div>
                    <div class="bcg-metric">Profit: ₹{{ "%.2f"|format(product.profit) }}</div>
                </div>
            </div>
            {% endfor %}
        </div>

        <div class="bcg-quadrant dogs-quadrant">
            <h3 class="quadrant-title dogs-title">🐕 Dogs</h3>
            {% for product in bcg_recommendations.dogs %}
            <div class="bcg-product">
                <div class="product-name">{{ product.product_name }}</div>
                <div class="product-brand">{{ product.brand }}</div>
                <div class="bcg-metrics">
                    <div class="bcg-metric">Price: ₹{{ "%.2f"|format(product.price) }}</div>
                    <div class="bcg-metric">Sales: ₹{{ "%.2f"|format(product.sales) }}</div>
                    <div class="bcg-metric">Profit: ₹{{ "%.2f"|format(product.profit) }}</div>
                </div>
            </div>
            {% endfor %}
        </div>

        <div class="bcg-quadrant question-marks-quadrant">
            <h3 class="quadrant-title question-marks-title">❓ Question Marks</h3>
            {% for product in bcg_recommendations.question_marks %}
            <div class="bcg-product">
                <div class="product-name">{{ product.product_name }}</div>
                <div class="product-brand">{{ product.brand }}</div>
                <div class="bcg-metrics">
                    <div class="bcg-metric">Price: ₹{{ "%.2f"|format(product.price) }}</div>
                    <div class="bcg-metric">Sales: ₹{{ "%.2f"|format(product.sales) }}</div>
                    <div class="bcg-metric">Profit: ₹{{ "%.2f"|format(product.profit) }}</div>
                </div>
            </div>
            {% endfor %}
        </div>
    </div>
</div>
{% endblock %}

----- File: D:\ML Folders\ml_env\GitHub\Hero-Product-Recommendation\templates\signup.html -----
{% extends "base.html" %}

{% block title %}Sign Up{% endblock %}

{% block extra_css %}
<style>
    .auth-container {
        max-width: 400px;
        margin: 50px auto;
        padding: 20px;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .auth-title {
        text-align: center;
        color: #2c3e50;
        margin-bottom: 30px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        color: #2c3e50;
    }

    .form-group input {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 16px;
    }

    .auth-button {
        width: 100%;
        padding: 12px;
        background-color: #3498db;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .auth-button:hover {
        background-color: #2980b9;
    }

    .auth-links {
        text-align: center;
        margin-top: 20px;
    }

    .auth-links a {
        color: #3498db;
        text-decoration: none;
    }

    .auth-links a:hover {
        text-decoration: underline;
    }

    .flash-messages {
        margin-bottom: 20px;
    }

    .alert {
        padding: 10px;
        border-radius: 4px;
        margin-bottom: 10px;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }
</style>
{% endblock %}

{% block content %}
<div class="auth-container">
    <h2 class="auth-title">Sign Up</h2>
    
    <div class="flash-messages">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ category }}">{{ message }}</div>
                {% endfor %}
            {% endif %}
        {% endwith %}
    </div>

    <form method="POST" action="{{ url_for('signup') }}">
        <div class="form-group">
            <label for="username">Username</label>
            <input type="text" id="username" name="username" required>
        </div>
        
        <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required>
        </div>
        
        <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required>
        </div>
        
        <div class="form-group">
            <label for="confirm_password">Confirm Password</label>
            <input type="password" id="confirm_password" name="confirm_password" required>
        </div>
        
        <button type="submit" class="auth-button">Sign Up</button>
    </form>
    
    <div class="auth-links">
        <p>Already have an account? <a href="{{ url_for('login') }}">Login</a></p>
    </div>
</div>
{% endblock %} 